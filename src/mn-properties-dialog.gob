/* 
 * Mail Notification
 * Copyright (C) 2003-2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-dialog.h"
%}

%privateheader{
#include "mn-mailbox.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <gtk/gtk.h>
#include <eel/eel.h>
#include "mn-conf.h"
#include "mn-util.h"
#include "mn-mailbox-view.h"
#include "mn-shell.h"
#include "mn-test-mailbox.h"
%}

class MN:Properties:Dialog from MN:Dialog
{
  private GtkWidget *notebook;

  /* general tab */
  private GtkWidget *display_seen_mail_check;
  private GtkWidget *scrolled;
  private GtkWidget *list;
  private GtkWidget *selected_label;
  private GtkWidget *add;
  private GtkWidget *remove;
  private GtkWidget *properties;
  private GtkWidget *command_new_mail_check;
  private GtkWidget *command_new_mail_entry;
  private GtkWidget *command_mail_read_check;
  private GtkWidget *command_mail_read_entry;

  /* status icon tab */
  private GtkWidget *icon_blink_check;
  private GtkWidget *icon_always_display_check;
  private GtkWidget *icon_tooltip_mail_summary_standard_radio;
  private GtkWidget *icon_tooltip_mail_summary_compact_radio;
  private GtkWidget *icon_tooltip_mail_summary_none_radio;
  private GtkWidget *icon_action_properties_dialog_radio;
  private GtkWidget *icon_action_mail_reader_radio;
  private GtkWidget *icon_action_open_latest_message_radio;
  private GtkWidget *icon_action_update_radio;

  /* message popups tab */
  private GtkWidget *popups_enable_check;
  private GtkWidget *popups_position_section_label;
  private GtkWidget *popups_position_attached_radio;
  private GtkWidget *popups_position_free_radio;
  private GtkWidget *popups_expiration_section_label;
  private GtkWidget *popups_expiration_default_radio;
  private GtkWidget *popups_expiration_never_radio;
  private GtkWidget *popups_expiration_after_radio;
  private GtkWidget *popups_expiration_minutes_spin;
  private GtkWidget *popups_expiration_minutes_label;
  private GtkWidget *popups_expiration_seconds_spin;
  private GtkWidget *popups_expiration_seconds_label;

  private MNMailbox *test_mailbox destroy { self_remove_test_mailbox(self); };

  init (self)
  {
    GtkSizeGroup *size_group;
    GtkTreeSelection *selection;
    GtkWidget *test_messages_check;

    mn_container_create_interface(GTK_CONTAINER(self),
				  UIDIR G_DIR_SEPARATOR_S "properties-dialog.glade",
				  "notebook",
				  "mn_properties_dialog_",
				  "notebook", &selfp->notebook,
				  "display_seen_mail_check", &selfp->display_seen_mail_check,
				  "scrolled", &selfp->scrolled,
				  "selected_label", &selfp->selected_label,
				  "add", &selfp->add,
				  "remove", &selfp->remove,
				  "properties", &selfp->properties,
				  "command_new_mail_check", &selfp->command_new_mail_check,
				  "command_new_mail_entry", &selfp->command_new_mail_entry,
				  "command_mail_read_check", &selfp->command_mail_read_check,
				  "command_mail_read_entry", &selfp->command_mail_read_entry,
				  "icon_blink_check", &selfp->icon_blink_check,
				  "icon_always_display_check", &selfp->icon_always_display_check,
				  "icon_tooltip_mail_summary_standard_radio", &selfp->icon_tooltip_mail_summary_standard_radio,
				  "icon_tooltip_mail_summary_compact_radio", &selfp->icon_tooltip_mail_summary_compact_radio,
				  "icon_tooltip_mail_summary_none_radio", &selfp->icon_tooltip_mail_summary_none_radio,
				  "icon_action_properties_dialog_radio", &selfp->icon_action_properties_dialog_radio,
				  "icon_action_mail_reader_radio", &selfp->icon_action_mail_reader_radio,
				  "icon_action_open_latest_message_radio", &selfp->icon_action_open_latest_message_radio,
				  "icon_action_update_radio", &selfp->icon_action_update_radio,
				  "popups_enable_check", &selfp->popups_enable_check,
				  "popups_position_section_label", &selfp->popups_position_section_label,
				  "popups_position_attached_radio", &selfp->popups_position_attached_radio,
				  "popups_position_free_radio", &selfp->popups_position_free_radio,
				  "popups_expiration_section_label", &selfp->popups_expiration_section_label,
				  "popups_expiration_default_radio", &selfp->popups_expiration_default_radio,
				  "popups_expiration_never_radio", &selfp->popups_expiration_never_radio,
				  "popups_expiration_after_radio", &selfp->popups_expiration_after_radio,
				  "popups_expiration_minutes_spin", &selfp->popups_expiration_minutes_spin,
				  "popups_expiration_minutes_label", &selfp->popups_expiration_minutes_label,
				  "popups_expiration_seconds_spin", &selfp->popups_expiration_seconds_spin,
				  "popups_expiration_seconds_label", &selfp->popups_expiration_seconds_label,
				  NULL);

    /* translators: header capitalization */
    gtk_window_set_title(GTK_WINDOW(self), _("Mail Notification Properties"));

    gtk_dialog_add_button(GTK_DIALOG(self), GTK_STOCK_HELP, GTK_RESPONSE_HELP);

    /* translators: "test" is an adjective, not a verb */
    test_messages_check = gtk_check_button_new_with_mnemonic(_("_Test messages"));
    gtk_box_pack_start(GTK_BOX(GTK_DIALOG(self)->action_area), test_messages_check, FALSE, FALSE, 0);
    gtk_widget_show(test_messages_check);
    g_signal_connect_swapped(test_messages_check, "toggled", G_CALLBACK(self_test_messages_toggled_h), self);

    gtk_dialog_add_button(GTK_DIALOG(self), GTK_STOCK_CLOSE, GTK_RESPONSE_CLOSE);

    selfp->list = mn_mailbox_view_new();
    gtk_container_add(GTK_CONTAINER(selfp->scrolled), selfp->list);
    gtk_widget_show(selfp->list);

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(selfp->list));
    g_object_connect(selection,
		     "swapped-signal::changed", self_update_selected_label, self,
		     "swapped-signal::changed", self_update_sensitivity, self,
		     NULL);

    mn_setup_dnd(selfp->scrolled);

    size_group = gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL);
    gtk_size_group_add_widget(size_group, selfp->command_new_mail_check);
    gtk_size_group_add_widget(size_group, selfp->command_mail_read_check);
    g_object_unref(size_group);

    mn_conf_link(self, MN_CONF_PROPERTIES_DIALOG,
		 selfp->display_seen_mail_check, MN_CONF_DISPLAY_SEEN_MAIL, "active",
		 selfp->command_new_mail_check, MN_CONF_COMMANDS_NEW_MAIL_ENABLED, "active",
		 selfp->command_new_mail_entry, MN_CONF_COMMANDS_NEW_MAIL_COMMAND, "text",
		 selfp->command_mail_read_check, MN_CONF_COMMANDS_MAIL_READ_ENABLED, "active",
		 selfp->command_mail_read_entry, MN_CONF_COMMANDS_MAIL_READ_COMMAND, "text",
		 selfp->icon_blink_check, MN_CONF_BLINK_ON_ERRORS, "active",
		 selfp->icon_always_display_check, MN_CONF_ALWAYS_DISPLAY_ICON, "active",
		 selfp->popups_enable_check, MN_CONF_POPUPS_ENABLED, "active",
		 selfp->popups_expiration_minutes_spin, MN_CONF_POPUPS_EXPIRATION_DELAY_MINUTES,
		 selfp->popups_expiration_seconds_spin, MN_CONF_POPUPS_EXPIRATION_DELAY_SECONDS,
		 NULL);
    mn_conf_link_radio_group_to_enum(MN_TYPE_SHELL_TOOLTIP_MAIL_SUMMARY,
				     MN_CONF_TOOLTIP_MAIL_SUMMARY,
				     selfp->icon_tooltip_mail_summary_standard_radio, MN_SHELL_TOOLTIP_MAIL_SUMMARY_STANDARD,
				     selfp->icon_tooltip_mail_summary_compact_radio, MN_SHELL_TOOLTIP_MAIL_SUMMARY_COMPACT,
				     selfp->icon_tooltip_mail_summary_none_radio, MN_SHELL_TOOLTIP_MAIL_SUMMARY_NONE,
				     NULL);
    mn_conf_link_radio_group_to_enum(MN_TYPE_ACTION,
				     MN_CONF_CLICK_ACTION,
				     selfp->icon_action_properties_dialog_radio, MN_ACTION_DISPLAY_PROPERTIES_DIALOG,
				     selfp->icon_action_mail_reader_radio, MN_ACTION_LAUNCH_MAIL_READER,
				     selfp->icon_action_open_latest_message_radio, MN_ACTION_OPEN_LATEST_MESSAGE,
				     selfp->icon_action_update_radio, MN_ACTION_UPDATE_MAIL_STATUS,
				     NULL);
    mn_conf_link_radio_group_to_enum(MN_TYPE_POPUP_POSITION,
				     MN_CONF_POPUPS_POSITION,
				     selfp->popups_position_attached_radio, MN_POPUP_POSITION_ATTACHED,
				     selfp->popups_position_free_radio, MN_POPUP_POSITION_FREE,
				     NULL);
    mn_conf_link_radio_group_to_enum(MN_TYPE_EXPIRATION_ENABLED,
				     MN_CONF_POPUPS_EXPIRATION_ENABLED,
				     selfp->popups_expiration_default_radio, MN_EXPIRATION_ENABLED_DEFAULT,
				     selfp->popups_expiration_never_radio, MN_EXPIRATION_ENABLED_FALSE,
				     selfp->popups_expiration_after_radio, MN_EXPIRATION_ENABLED_TRUE,
				     NULL);

    self_update_selected_label(self);
    self_update_sensitivity(self);

    /*
     * HIG chapter 3:
     * "When opening a dialog, provide initial keyboard focus to the
     * component that you expect users to operate first. This focus is
     * especially important for users who must use a keyboard to
     * navigate your application."
     */
    gtk_widget_grab_focus(selfp->add);

    g_signal_connect(self, "response", G_CALLBACK(self_response_h), NULL);
  }

  private void
    test_messages_toggled_h (self, GtkToggleButton *button)
  {
    if (gtk_toggle_button_get_active(button))
      {
	if (! selfp->test_mailbox)
	  {
	    selfp->test_mailbox = mn_test_mailbox_new();
	    mn_mailbox_seal(selfp->test_mailbox);
	    mn_mailboxes_add(mn_shell->mailboxes, selfp->test_mailbox);
	  }
      }
    else
      self_remove_test_mailbox(self);
  }

  private void
    remove_test_mailbox (self)
  {
    if (selfp->test_mailbox)
      {
	mn_mailboxes_remove(mn_shell->mailboxes, selfp->test_mailbox);
	g_object_unref(selfp->test_mailbox);
	selfp->test_mailbox = NULL;
      }
  }

  private void
    response_h (self, int response, gpointer user_data)
  {
    switch (response)
      {
      case GTK_RESPONSE_HELP:
	{
	  int current_page;
	  static const char *sections[] = {
	    "properties-general",
	    "properties-status-icon",
	    "properties-message-popups"
	  };

	  current_page = gtk_notebook_get_current_page(GTK_NOTEBOOK(selfp->notebook));
	  g_assert(current_page >= 0 && current_page < G_N_ELEMENTS(sections));

	  mn_display_help(GTK_WINDOW(self), sections[current_page]);
	  break;
	}

      case GTK_RESPONSE_CLOSE:
	gtk_widget_destroy(GTK_WIDGET(self));
	break;
      }
  }

  private void
    update_selected_label (self)
  {
    GtkTreeSelection *selection;
    int n_rows;

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(selfp->list));
    n_rows = gtk_tree_selection_count_selected_rows(selection);

    if (n_rows == 0)
      gtk_label_set_text(GTK_LABEL(selfp->selected_label), _("No mailbox selected."));
    else
      {
	char *str;

	str = g_strdup_printf(ngettext("%i mailbox selected.",
				       "%i mailboxes selected.",
				       n_rows), n_rows);
	gtk_label_set_text(GTK_LABEL(selfp->selected_label), str);
	g_free(str);
      }
  }

  private void
    update_sensitivity (self)
  {
    gboolean command_new_mail_enabled;
    gboolean command_mail_read_enabled;
    GtkTreeSelection *selection;
    gboolean has_selection;
    gboolean popups_enabled;
    gboolean popups_expiration_after_enabled;

    command_new_mail_enabled = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->command_new_mail_check));
    command_mail_read_enabled = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->command_mail_read_check));

    gtk_widget_set_sensitive(selfp->command_new_mail_entry, command_new_mail_enabled);
    gtk_widget_set_sensitive(selfp->command_mail_read_entry, command_mail_read_enabled);

    selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(selfp->list));
    has_selection = gtk_tree_selection_count_selected_rows(selection) > 0;

    gtk_widget_set_sensitive(selfp->remove, has_selection);
    gtk_widget_set_sensitive(selfp->properties, has_selection);

    popups_enabled = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->popups_enable_check));
    popups_expiration_after_enabled = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->popups_expiration_after_radio));

    gtk_widget_set_sensitive(selfp->popups_position_section_label, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_position_attached_radio, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_position_free_radio, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_section_label, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_default_radio, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_never_radio, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_after_radio, popups_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_minutes_spin, popups_enabled && popups_expiration_after_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_minutes_label, popups_enabled && popups_expiration_after_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_seconds_spin, popups_enabled && popups_expiration_after_enabled);
    gtk_widget_set_sensitive(selfp->popups_expiration_seconds_label, popups_enabled && popups_expiration_after_enabled);
  }

  /* libglade callbacks */

  protected void
    toggled_h (self, GtkToggleButton *button)
  {
    self_update_sensitivity(self);
  }

  protected void
    add_clicked_h (self, GtkButton *button)
  {
    mn_mailbox_view_activate_add(MN_MAILBOX_VIEW(selfp->list));
  }

  protected void
    remove_clicked_h (self, GtkButton *button)
  {
    mn_mailbox_view_activate_remove(MN_MAILBOX_VIEW(selfp->list));
  }

  protected void
    properties_clicked_h (self, GtkButton *button)
  {
    mn_mailbox_view_activate_properties(MN_MAILBOX_VIEW(selfp->list));
  }
}
