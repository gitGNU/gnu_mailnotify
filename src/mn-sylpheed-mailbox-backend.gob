/*
 * Mail Notification
 * Copyright (C) 2003-2007 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-vfs-mailbox-backend.h"
%}

%privateheader{
#include "mn-locked-callback.h"

/* taken from procmsg.h in the Sylpheed sources */
#define SYLPHEED_MSG_NEW	(1U << 0)
#define SYLPHEED_MSG_UNREAD	(1U << 1)

/* taken from defs.h in the Sylpheed sources */
#define SYLPHEED_MARK_FILE	".sylpheed_mark"

typedef struct
{
  int		num;
  guint32	flags;
} MarkEntry;

typedef struct
{
  char		*data;
  gsize		data_size;
  GHashTable	*table;
} Marks;
%}

%{
#include "config.h"
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <glib/gi18n.h>
#include <eel/eel.h>
#include "mn-mailbox-private.h"
#include "mn-reentrant-mailbox-private.h"
#include "mn-vfs-mailbox-private.h"
#include "mn-vfs-mailbox-backend-private.h"
#include "mn-vfs.h"
#include "mn-util.h"
#include "mn-message-mime.h"
#include "mn-sylpheed-message.h"

/* taken from defs.h in the Sylpheed sources */
#define SYLPHEED_MARK_VERSION		2

/* taken from defs.h in the Claws Mail sources */
#define CLAWS_MAIL_CACHE_FILE		".sylpheed_claws_cache"
%}

class MN:Sylpheed:Mailbox:Backend from MN:VFS:Mailbox:Backend
{
  class_init (class)
  {
    MN_VFS_MAILBOX_BACKEND_CLASS(class)->format = "Sylpheed";
  }

  override (MN:VFS:Mailbox:Backend) void
    monitor_cb (MNVFSMailboxBackend *backend,
		const char *info_uri,
		GnomeVFSMonitorEventType event_type)
  {
    if (event_type == GNOME_VFS_MONITOR_EVENT_CHANGED
	|| event_type == GNOME_VFS_MONITOR_EVENT_DELETED
	|| event_type == GNOME_VFS_MONITOR_EVENT_CREATED)
      {
	char *filename;

	filename = eel_uri_get_basename(info_uri);
	if (filename)
	  {
	    /*
	     * The status of the mailbox can only have changed if the
	     * subject of the event is the mark file or a message file
	     * (having a numbered filename).
	     */
	    if (! strcmp(filename, SYLPHEED_MARK_FILE) || mn_str_isnumeric(filename))
	      mn_vfs_mailbox_backend_queue_check(backend);

	    g_free(filename);
	  }
      }
  }

  override (MN:VFS:Mailbox:Backend) gboolean
    is (MNVFSMailboxBackend *dummy,
	MNVFSMailboxBackendClass *class,
	MNVFSMailbox *mailbox)
  {
    gboolean is;
    GnomeVFSURI *uri;

    uri = gnome_vfs_uri_append_file_name(mailbox->vfs_uri, SYLPHEED_MARK_FILE);
    is = mn_vfs_test(uri, G_FILE_TEST_IS_REGULAR);
    gnome_vfs_uri_unref(uri);

    return is;
  }

  private gboolean
    is_claws_mail_mailbox (self)
  {
    gboolean is;
    GnomeVFSURI *uri;

    uri = gnome_vfs_uri_append_file_name(MN_VFS_MAILBOX_BACKEND(self)->mailbox->vfs_uri, CLAWS_MAIL_CACHE_FILE);
    is = mn_vfs_test(uri, G_FILE_TEST_IS_REGULAR);
    gnome_vfs_uri_unref(uri);

    return is;
  }

  /* non-reentrant, must be called with a lock held */
  private gboolean
    has_sylpheed_locking (void)
  {
    static gboolean checked = FALSE;
    static gboolean has = FALSE;

    if (! checked)
      {
	char *output;

	if (g_spawn_command_line_sync("sylpheed --version", &output, NULL, NULL, NULL))
	  {
	    if (strstr(output, "+locking"))
	      has = TRUE;
	    g_free(output);
	  }

	checked = TRUE;
      }

    return has;
  }

  private void
    update_check_latency (self)
  {
    MNVFSMailboxBackend *backend = MN_VFS_MAILBOX_BACKEND(self);

    mn_vfs_mailbox_lock(backend->mailbox);

    /*
     * If it is a Claws Mail mailbox, the check_latency can be set to
     * 0, since Claws Mail does not write the mark file in place but
     * uses an atomic rename() to move the new mark file over the
     * previous one.
     */
    if (self_is_claws_mail_mailbox(self))
      backend->check_latency = 0;
    else
      {
	/*
	 * If Sylpheed was compiled with the locking patch and the
	 * mailbox is local, check_latency can be set to 0, since we
	 * lock the mark file while reading it.
	 */
	if (self_has_sylpheed_locking() && gnome_vfs_uri_is_local(backend->mailbox->vfs_uri))
	  backend->check_latency = 0;
	else
	  /*
	   * Otherwise, set check_latency to 3 seconds to avoid race
	   * conditions that can occur when Sylpheed writes the mark
	   * file while we read it.
	   */
	  backend->check_latency = 3000;
      }

    mn_vfs_mailbox_unlock(backend->mailbox);
  }

  override (MN:VFS:Mailbox:Backend) void
    check (MNVFSMailboxBackend *backend, int check_id)
  {
    GError *err = NULL;
    GnomeVFSResult result;
    GnomeVFSResult close_result;
    GnomeVFSDirectoryHandle *handle;
    GnomeVFSFileInfo *file_info;
    Marks *marks;
    GSList *messages = NULL;

    self_update_check_latency(SELF(backend));

    mn_vfs_mailbox_backend_monitor(backend, check_id, backend->mailbox->uri, GNOME_VFS_MONITOR_DIRECTORY);

    marks = self_marks_new(backend->mailbox->vfs_uri, &err);
    if (! marks)
      {
	if (! mn_reentrant_mailbox_check_aborted(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
	  {
	    GDK_THREADS_ENTER();

	    mn_mailbox_set_error(MN_MAILBOX(backend->mailbox), _("unable to read %s: %s"), SYLPHEED_MARK_FILE, err->message);

	    gdk_flush();
	    GDK_THREADS_LEAVE();
	  }

	g_error_free(err);
	return;
      }

    if (mn_reentrant_mailbox_check_aborted(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
      goto finish;

    result = gnome_vfs_directory_open_from_uri(&handle, backend->mailbox->vfs_uri, GNOME_VFS_FILE_INFO_FOLLOW_LINKS);
    if (result != GNOME_VFS_OK)
      {
	if (! mn_reentrant_mailbox_check_aborted(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
	  {
	    GDK_THREADS_ENTER();

	    mn_mailbox_set_error(MN_MAILBOX(backend->mailbox), _("unable to open folder: %s"), gnome_vfs_result_to_string(result));

	    gdk_flush();
	    GDK_THREADS_LEAVE();
	  }

	goto end;
      }

    file_info = gnome_vfs_file_info_new();
    while ((result = gnome_vfs_directory_read_next(handle, file_info)) == GNOME_VFS_OK)
      if (mn_str_isnumeric(file_info->name))
	{
	  int num = atoi(file_info->name);
	  MarkEntry *entry = g_hash_table_lookup(marks->table, GINT_TO_POINTER(num));

	  if (! entry || (entry->flags & (SYLPHEED_MSG_NEW | SYLPHEED_MSG_UNREAD)) != 0)
	    {
	      MNMessageFlags flags = 0;
	      MNMessage *message;

	      if (mn_reentrant_mailbox_check_aborted(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
		break;

	      if (! entry || (entry->flags & SYLPHEED_MSG_NEW) != 0)
		flags |= MN_MESSAGE_NEW;

	      /*
	       * We set handle_status to FALSE, since Sylpheed has its
	       * own way (mark file) of differencing seen/unseen
	       * messages.
	       */
	      message = mn_vfs_message_new(MN_TYPE_SYLPHEED_MESSAGE,
					   backend,
					   backend->mailbox->vfs_uri,
					   file_info->name,
					   flags,
					   FALSE);
	      if (message)
		messages = g_slist_prepend(messages, message);
	    }
	}
    gnome_vfs_file_info_unref(file_info);
    close_result = gnome_vfs_directory_close(handle);

  finish:
    GDK_THREADS_ENTER();

    if (! mn_reentrant_mailbox_check_aborted(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
      {
	if (result == GNOME_VFS_ERROR_EOF || result == GNOME_VFS_OK)
	  {
	    if (close_result == GNOME_VFS_OK)
	      mn_mailbox_set_messages(MN_MAILBOX(backend->mailbox), messages);
	    else
	      mn_mailbox_set_error(MN_MAILBOX(backend->mailbox), _("unable to close folder: %s"), gnome_vfs_result_to_string(close_result));
	  }
	else
	  mn_mailbox_set_error(MN_MAILBOX(backend->mailbox), _("error while reading folder: %s"), gnome_vfs_result_to_string(result));
      }

    mn_g_object_slist_free(messages);

    gdk_flush();
    GDK_THREADS_LEAVE();

  end:
    self_marks_free(marks);
  }

  private gboolean
    read_local_mark_file (const char *filename (check null),
			  gsize *size (check null),
			  char **contents (check null),
			  GError **err)
  {
    int fd;
    struct flock lock;
    GIOChannel *channel;
    GError *tmp_err = NULL;
    gboolean status = FALSE;

    fd = open(filename, O_RDONLY);
    if (fd < 0)
      {
	g_set_error(err, 0, 0, "%s", g_strerror(errno));
	return FALSE;
      }

    memset(&lock, 0, sizeof(lock));
    lock.l_start = 0;		/* from l_whence */
    lock.l_len = 0;		/* to end of file */
    lock.l_type = F_RDLCK;	/* read lock */
    lock.l_whence = SEEK_SET;	/* from start of file */

    /* ignore lock failures */
    fcntl(fd, F_SETLKW, &lock);

    channel = g_io_channel_unix_new(fd);
    if (g_io_channel_set_encoding(channel, NULL, &tmp_err) == G_IO_STATUS_NORMAL)
      {
	if (g_io_channel_read_to_end(channel, contents, size, err) == G_IO_STATUS_NORMAL)
	  status = TRUE;
      }
    else
      {
	g_set_error(err, 0, 0, _("unable to set encoding: %s"), tmp_err->message);
	g_error_free(tmp_err);
      }

    g_io_channel_shutdown(channel, FALSE, NULL);
    g_io_channel_unref(channel);

    return status;
  }

  private gboolean
    read_remote_mark_file (GnomeVFSURI *uri (check null),
			   gsize *size (check null),
			   char **contents (check null),
			   GError **err)
  {
    GnomeVFSResult result;
    int _size;

    result = mn_vfs_read_entire_file_uri(uri, &_size, contents);
    if (result == GNOME_VFS_OK)
      {
	*size = _size;
	return TRUE;
      }
    else
      {
	g_set_error(err, 0, 0, "%s", gnome_vfs_result_to_string(result));
	return FALSE;
      }
  }

  private gboolean
    read_mark_file (GnomeVFSURI *mailbox_uri (check null),
		    gsize *size (check null),
		    char **contents (check null),
		    GError **err)
  {
    GnomeVFSURI *markfile_uri;
    char *filename;
    gboolean status;

    markfile_uri = gnome_vfs_uri_append_file_name(mailbox_uri, SYLPHEED_MARK_FILE);

    filename = mn_vfs_get_local_path(markfile_uri);
    if (filename)
      {
	status = self_read_local_mark_file(filename, size, contents, err);
	g_free(filename);
      }
    else
      status = self_read_remote_mark_file(markfile_uri, size, contents, err);

    gnome_vfs_uri_unref(markfile_uri);

    return status;
  }

  protected Marks *
    marks_new (GnomeVFSURI *mailbox_uri (check null), GError **err)
  {
    Marks *marks = NULL;
    gsize bytes_left;
    char *buf;

    if (self_read_mark_file(mailbox_uri, &bytes_left, &buf, err))
      {
	if (bytes_left >= sizeof(int))
	  {
	    int version = *((int *) buf);

	    if (version == SYLPHEED_MARK_VERSION)
	      {
		MarkEntry *entry;

		marks = g_new0(Marks, 1);
		marks->data = buf;
		marks->data_size = bytes_left;
		marks->table = g_hash_table_new(g_direct_hash, g_direct_equal);

		entry = (MarkEntry *) (buf + sizeof(int));
		bytes_left -= sizeof(int);

		buf = NULL;	/* now owned by marks */

		while (bytes_left > 0)
		  {
		    if (bytes_left < sizeof(MarkEntry))
		      {
			g_set_error(err, 0, 0, _("unexpected end of file"));
			self_marks_free(marks);
			marks = NULL;
			break;
		      }

		    g_hash_table_insert(marks->table, GINT_TO_POINTER(entry->num), entry);

		    entry++;
		    bytes_left -= sizeof(MarkEntry);
		  }
	      }
	    else
	      g_set_error(err, 0, 0, _("incompatible file version \"%i\""), version);
	  }
	else
	  g_set_error(err, 0, 0, _("file version missing"));

	g_free(buf);
      }

    return marks;
  }

  protected gboolean
    marks_write (GnomeVFSURI *mailbox_uri (check null),
		 Marks *marks (check null),
		 GError **err)
  {
    GnomeVFSURI *markfile_uri;
    gboolean status;

    /*
     * We do not lock the mark file, since the user is normally unable
     * to at the same time click on the "Mark as Read" button and use
     * Sylpheed.
     */

    markfile_uri = gnome_vfs_uri_append_file_name(mailbox_uri, SYLPHEED_MARK_FILE);
    /* Sylpheed uses S_IRUSR | S_IWUSR for data files */
    status = mn_vfs_write_entire_file_uri_safe(markfile_uri, marks->data_size, marks->data, S_IRUSR | S_IWUSR, err);
    gnome_vfs_uri_unref(markfile_uri);

    return status;
  }

  protected void
    marks_free (Marks *marks (check null))
  {
    g_free(marks->data);
    g_hash_table_destroy(marks->table);
    g_free(marks);
  }
}
