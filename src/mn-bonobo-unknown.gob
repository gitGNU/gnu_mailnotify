/*
 * MN:Bonobo:Unknown - a Bonobo_Unknown wrapper providing connection
 * monitoring.
 *
 * Mail Notification
 * Copyright (C) 2003-2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include <libbonobo.h>
%}

%privateheader{
#include "mn-locked-callback.h"
%}

%{
#include <gtk/gtk.h>
%}

class MN:Bonobo:Unknown from G:Object
{
  private Bonobo_Unknown object = CORBA_OBJECT_NIL
    unref { bonobo_object_release_unref(VAR, NULL); };
  property POINTER object (export, type = Bonobo_Unknown)
    set
    {
      bonobo_object_release_unref(selfp->object, NULL);
      selfp->object = g_value_get_pointer(VAL);
      bonobo_object_dup_ref(selfp->object, NULL);
    }
    get
    {
      g_value_set_pointer(VAL, bonobo_object_dup_ref(selfp->object, NULL));
    };

  private char *iid destroywith g_free;
  property STRING iid (link, flags = CONSTRUCT_ONLY);

  private MNLockedGSource *monitor_source;

  override (G:Object) GObject *
    constructor (GType type, unsigned int n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    Self *self;

    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = SELF(object);

    self_activate(self);

    selfp->monitor_source = mn_g_timeout_add_gdk_locked(1000, self_monitor_cb, self);

    return object;
  }

  override (G:Object) void
    dispose (GObject *object)
  {
    Self *self = SELF(object);

    mn_locked_g_source_clear(&selfp->monitor_source);

    PARENT_HANDLER(object);
  }

  private gboolean
    monitor_cb (gpointer data)
  {
    Self *self = data;

    if (selfp->object != CORBA_OBJECT_NIL)
      {
	if (! bonobo_unknown_ping(selfp->object, NULL))
	  self_set_object(self, CORBA_OBJECT_NIL);
      }
    else
      self_activate(self);

    return TRUE;		/* keep source */
  }

  private void
    activate (self)
  {
    Bonobo_Unknown object;

    object = bonobo_activation_activate_from_id(selfp->iid, 0, NULL, NULL);
    if (object != CORBA_OBJECT_NIL)
      {
	self_set_object(self, object);
	bonobo_object_release_unref(object, NULL);
      }
  }

  public MNBonoboUnknown *
    new (const char *iid)
  {
    return GET_NEW_VARG(MN_BONOBO_UNKNOWN_PROP_IID((char *) iid), NULL);
  }
}
