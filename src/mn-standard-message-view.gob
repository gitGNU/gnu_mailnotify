/* 
 * Copyright (C) 2005, 2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.14

%headertop{
#include "mn-message-view.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include "mn-message-view-private.h"
#include "mn-message.h"
#include "mn-util.h"
#include "mn-text-table.h"
%}

class MN:Standard:Message:View from MN:Message:View
{
  override (MN:Message:View) void
    update (MNMessageView *view, GSList *messages)
  {
    Self *self = SELF(view);
    time_t now;
    GSList *l;

    mn_text_table_clear(MN_TEXT_TABLE(view));

    now = mn_time();
    MN_LIST_FOREACH(l, messages)
      {
	self_append_message(self, now, l->data);
	if (l->next)
	  {
	    mn_text_table_append_blank_cell(MN_TEXT_TABLE(self), 0, 12);
	    mn_text_table_line_break(MN_TEXT_TABLE(self));
	  }
      }

    PARENT_HANDLER(view, messages);
  }

  private void
    append_message (self, time_t now, MN:Message *message (check null type))
  {
    self_append_row(self, _("Mailbox:"), message->mailbox_name);
    if (message->error)
      self_append_row(self, _("Unreadable message:"), message->error);
    else
      {
	self_append_row(self, _("From:"), message->from);
	self_append_row(self, _("Subject:"), message->subject);

	if (message->sent_time > 0)
	  {
	    self_append_header(self, _("Sent:"));
	    mn_message_view_append_past_time_cell(MN_MESSAGE_VIEW(self), message->sent_time, now);
	    mn_text_table_line_break(MN_TEXT_TABLE(self));
	  }
      }
  }

  private void
    append_row (self,
		const char *name (check null),
		const char *value (check null))
  {
    self_append_header(self, name);
    mn_text_table_append_text_cell(MN_TEXT_TABLE(self), value);
    mn_text_table_line_break(MN_TEXT_TABLE(self));
  }

  private void
    append_header (self, const char *name (check null))
  {
    char *markup;

    markup = g_markup_printf_escaped("<span weight=\"bold\">%s</span>", name);
    mn_text_table_append_text_cell_from_markup(MN_TEXT_TABLE(self), markup);
    g_free(markup);
  }

  public GtkWidget *
    new (void)
  {
    return GTK_WIDGET(GET_NEW);
  }
}
