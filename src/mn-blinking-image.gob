/* 
 * Copyright (C) 2004-2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.14

%headertop{
#include <gtk/gtk.h>
%}

%privateheader{
#include "mn-locked-callback.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
%}

class MN:Blinking:Image from Gtk:Image
{
  private gboolean blinking;
  property BOOLEAN blinking (export)
    set
    {
      gboolean blinking = g_value_get_boolean(VAL);
      if (blinking != selfp->blinking)
	{
	  selfp->blinking = blinking;
	  if (blinking)
	    selfp->timeout_source = mn_g_timeout_add_gdk_locked(500, self_timeout_cb, self);
	  else
	    {
	      mn_locked_g_source_remove(selfp->timeout_source);
	      self_update(self, TRUE);
	    }
	}
    }
    get
    {
      g_value_set_boolean(VAL, selfp->blinking);
    };

  private MNLockedGSource *timeout_source;
  private gboolean is_on = TRUE; /* is currently displaying the image? */

  private char *stock_id destroywith g_free;
  private GtkIconSize icon_size;

  override (G:Object) void
    finalize (GObject *object)
  {
    Self *self = SELF(object);

    if (selfp->timeout_source)
      mn_locked_g_source_remove(selfp->timeout_source);

    PARENT_HANDLER(object);
  }

  private void
    update (self, gboolean is_on)
  {
    if (is_on)
      gtk_image_set_from_stock(GTK_IMAGE(self), selfp->stock_id, selfp->icon_size);
    else
      {
	GdkPixbuf *pixbuf;
	int width, height;

	pixbuf = gtk_widget_render_icon(GTK_WIDGET(self),
					selfp->stock_id,
					selfp->icon_size,
					NULL);
	g_assert(pixbuf != NULL);

	width = gdk_pixbuf_get_width(pixbuf);
	height = gdk_pixbuf_get_height(pixbuf);
	g_object_unref(pixbuf);

	pixbuf = gdk_pixbuf_new(GDK_COLORSPACE_RGB, TRUE, 8, width, height);
	gdk_pixbuf_fill(pixbuf, 0); /* fill with transparency */

	gtk_image_set_from_pixbuf(GTK_IMAGE(self), pixbuf);
	g_object_unref(pixbuf);
      }

    selfp->is_on = is_on;
  }

  private gboolean
    timeout_cb (gpointer data)
  {
    Self *self = data;

    self_update(self, ! selfp->is_on);

    return TRUE;
  }

  public GtkWidget *
    new (void)
  {
    return GTK_WIDGET(GET_NEW);
  }

  public void
    set_from_stock (self,
		    const char *stock_id (check null),
		    GtkIconSize icon_size)
  {
    g_free(selfp->stock_id);
    selfp->stock_id = g_strdup(stock_id);
    selfp->icon_size = icon_size;

    self_update(self, selfp->is_on);
  }
}
