/*
 * Mail Notification
 * Copyright (C) 2003-2008 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-text-table.h"
%}

%privateheader{
#include <time.h>
%}

%{
#include "mn-locked-callback.h"
#include "mn-util.h"

typedef struct
{
  MNMessageView		*self;
  MNTextTableCell	*cell;
  GList			*link;
  time_t		past_time;
} PastTimeCell;

static GQueue *past_time_cells;
static MNLockedGSource *past_time_cells_timeout_source = NULL;
%}

class MN:Message:View from MN:Text:Table (abstract)
{
  private GSList *past_time_cells;

  property POINTER messages (export)
    set
    {
      self_update(self, g_value_get_pointer(VAL));
    };

  class_init (class)
  {
    past_time_cells = g_queue_new();
  }

  override (G:Object) void
    finalize (GObject *object)
  {
    Self *self = SELF(object);

    self_clear_past_time_cells(self);

    PARENT_HANDLER(object);
  }

  virtual private void
    update (self, GSList *messages);

  override (MN:Text:Table) void
    clear (MNTextTable *table)
  {
    self_clear_past_time_cells(SELF(table));

    PARENT_HANDLER(table);
  }

  protected void
    append_past_time_cell (self, time_t past_time, time_t now)
  {
    PastTimeCell *pcell;

    pcell = g_new(PastTimeCell, 1);
    pcell->self = self;
    pcell->cell = mn_text_table_append_text_cell(MN_TEXT_TABLE(self), NULL);
    pcell->link = g_list_alloc();
    pcell->link->data = pcell;
    pcell->past_time = past_time;

    self_update_past_time_cell(pcell, now);

    selfp->past_time_cells = g_slist_prepend(selfp->past_time_cells, pcell);
    g_queue_push_tail_link(past_time_cells, pcell->link);

    if (! past_time_cells_timeout_source)
      self_install_past_time_cells_timeout();
  }

  private void
    clear_past_time_cells (self)
  {
    GSList *l;

    if (! selfp->past_time_cells)
      return;

    MN_LIST_FOREACH(l, selfp->past_time_cells)
      {
	PastTimeCell *pcell = l->data;

	g_queue_delete_link(past_time_cells, pcell->link);
	g_free(pcell);
      }

    mn_g_slist_clear(&selfp->past_time_cells);

    if (g_queue_is_empty(past_time_cells))
      mn_locked_g_source_clear(&past_time_cells_timeout_source);
  }

  private void
    install_past_time_cells_timeout (void)
  {
    GTimeVal now;
    int timeout;

    g_get_current_time(&now);
    timeout = (G_USEC_PER_SEC - now.tv_usec) / 1000 + 1;

    past_time_cells_timeout_source = mn_g_timeout_add_gdk_locked(timeout, self_update_past_time_cells_cb, NULL);
  }

  private gboolean
    update_past_time_cells_cb (gpointer data)
  {
    time_t now;
    GList *l;

    now = mn_time();
    MN_QUEUE_FOREACH(l, past_time_cells)
      self_update_past_time_cell(l->data, now);

    self_install_past_time_cells_timeout();
    return FALSE;		/* remove source */
  }

  private void
    update_past_time_cell (PastTimeCell *pcell (check null), time_t now)
  {
    char *formatted;

    formatted = mn_format_past_time(pcell->past_time, now);
    mn_text_table_cell_set_text(MN_TEXT_TABLE(pcell->self), pcell->cell, formatted);
    g_free(formatted);
  }
}
