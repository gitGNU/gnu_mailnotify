/* 
 * Copyright (c) 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include <gtk/gtk.h>
#include "mn-message.h"
%}
%{
#include "config.h"
#include <glib/gi18n.h>
#include "mn-util.h"
%}

class MN:Message:Box from Gtk:VBox
{
  private GtkWidget *sent_label;
  private unsigned int update_timeout_id;

  private GtkSizeGroup *size_group unrefwith g_object_unref;
  property OBJECT size_group (object_type = Gtk:Size:Group,
			      flags = CONSTRUCT_ONLY,
			      link);

  private MNMessage *message unrefwith g_object_unref;
  property OBJECT message (object_type = MN:Message,
			   flags = CONSTRUCT_ONLY,
			   link);

  private gboolean selectable;
  property BOOLEAN selectable (flags = CONSTRUCT_ONLY, link);

  private GSList *labels destroywith g_slist_free;

  override (G:Object) GObject *
    constructor (GType type, guint n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    Self *self;

    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = SELF(object);

    gtk_widget_set_name(GTK_WIDGET(self), "mn-message-box");
    self_append_row(self, _("Mailbox"), selfp->message->mailbox_uri->human_readable, NULL);

    if (selfp->message->error)
      self_append_row(self, _("Unreadable message"), selfp->message->error, NULL);
    else
      {
	char *ago;

	self_append_row(self, _("From"), selfp->message->from, NULL);
	self_append_row(self, _("Subject"), selfp->message->subject, NULL);

	ago = self_get_ago(self);
	if (ago)
	  {
	    self_append_row(self, _("Sent"), ago, &selfp->sent_label);
	    g_free(ago);
	    selfp->update_timeout_id = g_timeout_add(500, self_update_cb, self);
	  }
      }

    return object;
  }

  override (G:Object) void
    finalize (G:Object *object (check null type))
  {
    Self *self = SELF(object);

    if (selfp->update_timeout_id)
      g_source_remove(selfp->update_timeout_id);

    PARENT_HANDLER(object);
  }

  private gboolean
    update_cb (gpointer data (check null))
  {
    Self *self = data;
    char *ago;

    ago = self_get_ago(self);

    GDK_THREADS_ENTER();
    gtk_label_set_text(GTK_LABEL(selfp->sent_label), ago);
    GDK_THREADS_LEAVE();

    g_free(ago);

    return TRUE;		/* continue */
  }

  private void
    append_row (self,
		const char *name (check null),
		const char *value,
		GtkWidget **value_label)
  {
    GtkWidget *hbox;
    GtkWidget *label;
    char *markup;

    hbox = gtk_hbox_new(FALSE, 0);
    
    /* name */

    markup = g_markup_printf_escaped("<span weight=\"bold\">%s:</span>", name);
    label = gtk_label_new(markup);
    g_free(markup);

    gtk_widget_set_name(label, "name");
    gtk_misc_set_alignment(GTK_MISC(label), 1.0, 0.5);
    gtk_label_set_use_markup(GTK_LABEL(label), TRUE);
    gtk_label_set_selectable(GTK_LABEL(label), selfp->selectable);

    gtk_size_group_add_widget(selfp->size_group, label);
    gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);
    selfp->labels = g_slist_append(selfp->labels, label);

    /* separator */

    label = gtk_label_new(" ");
    gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);
    selfp->labels = g_slist_append(selfp->labels, label);

    /* value */

    label = gtk_label_new(value);

    gtk_widget_set_name(label, "value");
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
    gtk_label_set_selectable(GTK_LABEL(label), selfp->selectable);

    gtk_box_pack_start(GTK_BOX(hbox), label, TRUE, TRUE, 0);
    selfp->labels = g_slist_append(selfp->labels, label);

    if (value_label)
      *value_label = label;

    gtk_box_pack_start(GTK_BOX(self), hbox, FALSE, FALSE, 0);
    gtk_widget_show_all(hbox);
  }

  private char *
    get_ago (self)
  {
    char *ago = NULL;

    if (selfp->message->sent_time)
      {
	time_t now;
	
	now = mn_time();
	if (now > 0)
	  {
	    time_t diff;
	    
	    diff = now - selfp->message->sent_time;
	    if (diff >= 0)
	      ago = self_format_delay(diff);
	  }
      }

    return ago;
  }

  private char *
    format_delay (time_t delay)
  {
    char *str;

    if (delay < 60)
      str = g_strdup_printf(ngettext("%i second ago", "%i seconds ago", delay), delay);
    else if (delay < 60 * 60)
      {
	int minutes = delay / 60;
	str = g_strdup_printf(ngettext("%i minute ago", "%i minutes ago", minutes), minutes);
      }
    else if (delay < 60 * 60 * 24)
      {
	int hours = delay / (60 * 60);
	str = g_strdup_printf(ngettext("%i hour ago", "%i hours ago", hours), hours);
      }
    else if (delay < 60 * 60 * 24 * 7)
      {
	int days = delay / (60 * 60 * 24);
	str = g_strdup_printf(ngettext("%i day ago", "%i days ago", days), days);
      }
    else
      {
	int weeks = delay / (60 * 60 * 24 * 7);
	str = g_strdup_printf(ngettext("%i week ago", "%i weeks ago", weeks), weeks);
      }

    return str;
  }

  public GtkWidget *
    new (Gtk:Size:Group *size_group (check null type),
	 MN:Message *message (check null type),
	 gboolean selectable)
  {
    return GTK_WIDGET(GET_NEW_VARG(MN_MESSAGE_BOX_PROP_SIZE_GROUP(G_OBJECT(size_group)),
				   MN_MESSAGE_BOX_PROP_MESSAGE(G_OBJECT(message)),
				   MN_MESSAGE_BOX_PROP_SELECTABLE(selectable),
				   NULL));
  }

  public GSList *
    get_labels (self)
  {
    return selfp->labels;
  }
}
