/* 
 * Copyright (C) 2005 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.12

%headertop{
#include <gtk/gtk.h>
#include <stdarg.h>
#include "mn-mailbox.h"
%}

class MN:Mailbox:Properties from Gtk:VBox
{
  classwide const char *type;
  classwide const char *stock_id;
  classwide const char *combo_label;
  classwide const char *section_label;

  protected GtkSizeGroup *label_size_group = {gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL)} unrefwith g_object_unref;
  protected GtkSizeGroup *entry_button_size_group = {gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL)} unrefwith g_object_unref;
  
  protected GSList *entries destroywith g_slist_free;

  property BOOLEAN complete
    get { g_value_set_boolean(VAL, TRUE); };
  property STRING default_name
    get { g_value_set_string(VAL, NULL); };
  
  virtual public void
    set_mailbox (self, MNMailbox *mailbox);

  virtual public MNMailbox *
    get_mailbox (self)
  {
    return mn_mailbox_new(SELF_GET_CLASS(self)->type, NULL);
  }
  
  init (self)
  {
    gtk_box_set_spacing(GTK_BOX(self), 6);
  }

  protected void
    notify_complete (self)
  {
    g_object_notify(G_OBJECT(self), "complete");
  }

  protected void
    notify_default_name (self)
  {
    g_object_notify(G_OBJECT(self), "default-name");
  }
  
  protected void
    add_entry (self, Gtk:Entry *entry (check null type))
  {
    self->entries = g_slist_append(self->entries, entry);
  }

  protected void
    add_entries (self, GtkEntry *entry, ...)
  {
    va_list args;

    va_start(args, entry);
    while (entry)
      {
	self_add_entry(self, entry);
	entry = va_arg(args, GtkEntry *);
      }
    va_end(args);
  }
}
