/*
 * Mail Notification
 * Copyright (C) 2003-2007 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-authenticated-mailbox.h"
%}

%h{
#define MN_PI_MAILBOX_N_CONNECTION_TYPES	3
%}

%privateheader{
#include <gtk/gtk.h>
#include "mn-client-session.h"

#define MN_PI_MAILBOX_SESSION_PRIVATE \
  MNMailbox		*mailbox;	\
  MNPIMailbox		*pi_mailbox;	\
  MNClientSession	*session
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <gnome.h>
#include <eel/eel.h>
#include "mn-mailbox-private.h"
#include "mn-util.h"
#include "mn-stock.h"

static GHashTable *password_database;
G_LOCK_DEFINE_STATIC(password_database);

struct _MNClientSessionPrivate
{
  MN_PI_MAILBOX_SESSION_PRIVATE;
};
%}

enum MN_PI_MAILBOX_CONNECTION_TYPE
{
  NORMAL,
  INBAND_SSL,
  SSL,
} MN:PI:Mailbox:Connection:Type;

class MN:PI:Mailbox from MN:Authenticated:Mailbox (abstract)
{
  classwide int *default_ports;

  public MNPIMailboxConnectionType connection_type;
  property ENUM connection_type (link,
				 enum_type = MN:PI:Mailbox:Connection:Type,
				 flags = CONSTRUCT | MN_MAILBOX_PARAM_PERMANENT,
				 default_value = MN_PI_MAILBOX_CONNECTION_TYPE_NORMAL);

  public char *authmech destroywith g_free;
  property STRING authmech (link, flags = MN_MAILBOX_PARAM_PERMANENT);

  /* named hostname and not server for historical reasons */
  public char *hostname destroywith g_free;
  property STRING hostname (link, flags = MN_MAILBOX_PARAM_PERMANENT | MN_MAILBOX_PARAM_REQUIRED);

  public int port;
  property INT port (link,
		     flags = MN_MAILBOX_PARAM_PERMANENT,
		     minimum = 0,
		     maximum = 65535);

  public int runtime_port;

  public char *runtime_username destroywith g_free;
  public char *runtime_password destroywith g_free;

  private GtkWidget *auth_dialog;
  protected gboolean auth_prompted;
  protected gboolean auth_cancelled;
  private gboolean auth_failed;

  class_init (class)
  {
    password_database = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);

    /*
     * 5 minutes is a good default check delay for remote POP3/IMAP
     * mailboxes.
     */
    MN_MAILBOX_CLASS(class)->default_check_delay = 60 * 5;
  }

  init (self)
  {
    mn_mailbox_set_stock_id(MN_MAILBOX(self), MN_STOCK_REMOTE);
  }

  override (MN:Mailbox) void
    removed (MNMailbox *mailbox)
  {
    Self *self = SELF(mailbox);

    if (selfp->auth_dialog)
      gtk_dialog_response(GTK_DIALOG(selfp->auth_dialog), GTK_RESPONSE_CANCEL);

    PARENT_HANDLER(mailbox);
  }

  override (MN:Mailbox) void
    seal (MNMailbox *mailbox)
  {
    Self *self = SELF(mailbox);

    PARENT_HANDLER(mailbox);

    /* do not save default port to mailboxes.xml */
    if (self->port == SELF_GET_CLASS(self)->default_ports[self->connection_type])
      self->port = 0;

    self->runtime_port = self->port == 0
      ? SELF_GET_CLASS(self)->default_ports[self->connection_type]
      : self->port;
  }

  override (MN:Authenticated:Mailbox) void
    authenticated_check (MNAuthenticatedMailbox *mailbox)
  {
    Self *self = SELF(mailbox);

    PARENT_HANDLER(mailbox);

#if ! WITH_SSL
    if (self->connection_type == MN_PI_MAILBOX_CONNECTION_TYPE_INBAND_SSL
	|| self->connection_type == MN_PI_MAILBOX_CONNECTION_TYPE_SSL)
      {
	GDK_THREADS_ENTER();

	mn_mailbox_set_error(MN_MAILBOX(mailbox), _("SSL/TLS support has not been compiled in"));
	mn_mailbox_set_poll(MN_MAILBOX(mailbox), FALSE); /* disable the mailbox */

	gdk_flush();
	GDK_THREADS_LEAVE();
      }
#endif

    self->auth_prompted = FALSE;
    selfp->auth_failed = FALSE;
  }

  protected gboolean
    split_uri (const char *uri (check null),
	       int maxlen,
	       char *scheme (check null),
	       char *auth (check null),
	       char *location (check null),
	       gboolean *has_auth (check null))
  {
    char *pat;
    int n;

    pat = g_strdup_printf("%%%i[^:]://%%%i[^@]@%%%is", maxlen, maxlen, maxlen);
    n = sscanf(uri, pat, scheme, auth, location);
    g_free(pat);

    if (n >= 2)
      {
	*has_auth = n == 3;

	if (! *has_auth)
	  strcpy(location, auth);

	return TRUE;
      }
    else
      return FALSE;
  }

  protected gboolean
    split_uri_auth (const char *auth (check null),
		    int maxlen,
		    char *username (check null),
		    char *authmech (check null),
		    gboolean *has_username (check null),
		    gboolean *has_authmech (check null))
  {
    char *pat;
    int n;

    pat = g_strdup_printf("%%%i[^;];AUTH=%%%is", maxlen, maxlen);
    n = sscanf(auth, pat, username, authmech);
    g_free(pat);

    *has_username = FALSE;
    *has_authmech = FALSE;

    if (n >= 1)
      {
	*has_username = TRUE;

	if (n == 2)
	  *has_authmech = TRUE;
      }
    else
      {
	pat = g_strdup_printf(";AUTH=%%%is", maxlen);
	n = sscanf(auth, pat, authmech);
	g_free(pat);

	if (n < 1)
	  return FALSE;

	*has_authmech = TRUE;
      }

    return TRUE;
  }

  protected void
    split_uri_hostport (const char *hostport (check null),
			int maxlen,
			char *hostname (check null),
			int *port (check null))
  {
    char *pat;
    int n;

    /* split host:port part in 2 subparts: host and port */

    pat = g_strdup_printf("[%%%i[^]]]:%%u", maxlen);
    n = sscanf(hostport, pat, hostname, port);
    g_free(pat);

    if (n < 1)
      {
	pat = g_strdup_printf("%%%i[^:]:%%u", maxlen);
	n = sscanf(hostport, pat, hostname, port);
	g_free(pat);
      }

    g_assert(n >= 1);

    if (n < 2)
      *port = 0;
  }

  protected void
    auth_failed (self)
  {
    MNAuthenticatedMailbox *auth_mailbox = MN_AUTHENTICATED_MAILBOX(self);

    if (! auth_mailbox->password)
      {
	g_free(self->runtime_password);
	self->runtime_password = NULL;

	if (self->runtime_username)
	  self_set_password(self, self->runtime_username, NULL);
      }

    if (! auth_mailbox->username)
      {
	g_free(self->runtime_username);
	self->runtime_username = NULL;
      }

    selfp->auth_failed = TRUE;
  }

  protected gboolean
    fill_credentials (self, gboolean need_username, gboolean need_password)
  {
    MNAuthenticatedMailbox *auth_mailbox = MN_AUTHENTICATED_MAILBOX(self);

    g_return_val_if_fail(need_username || need_password, FALSE);

    self->auth_cancelled = FALSE;

    if (! self->runtime_username)
      self->runtime_username = g_strdup(auth_mailbox->username);
    if (! self->runtime_password)
      self->runtime_password = g_strdup(auth_mailbox->password);

    if (self->runtime_username && ! self->runtime_password && need_password)
      self->runtime_password = self_get_password(self, self->runtime_username);

    if (self->runtime_username)
      need_username = FALSE;
    if (self->runtime_password)
      need_password = FALSE;

    if (need_username || need_password)
      {
	char *username;
	char *password;

	GDK_THREADS_ENTER();

	self->auth_prompted = TRUE;

	if (self_credentials_prompt(self,
				    need_username ? &username : NULL,
				    need_password ? &password : NULL,
				    selfp->auth_failed
				    ? _("Mail Notification was unable to log into %s mailbox %s, possibly because the credentials you have entered are invalid.\n\nPlease re-enter your credentials.")
				    : _("Enter your credentials for %s mailbox %s."),
				    MN_MAILBOX(self)->format,
				    MN_MAILBOX(self)->runtime_name))
	  {
	    if (need_username)
	      self->runtime_username = username;
	    if (need_password)
	      self->runtime_password = password;
	  }
	else
	  self->auth_cancelled = TRUE;

	gdk_flush();
	GDK_THREADS_LEAVE();
      }

    if (self->runtime_username && self->runtime_password)
      self_set_password(self, self->runtime_username, self->runtime_password);

    return ! self->auth_cancelled;
  }

  private gboolean
    credentials_prompt (self,
			char **username,
			char **password,
			const char *format (check null),
			...)
  {
    va_list args;
    char *message;
    gboolean ok;

    g_return_val_if_fail(selfp->auth_dialog == NULL, FALSE);
    g_return_val_if_fail(username != NULL || password != NULL, FALSE);

    va_start(args, format);
    message = g_strdup_vprintf(format, args);
    va_end(args);

    /* keep the title in sync with gnome-authentication-manager */

    /* translators: header capitalization */
    selfp->auth_dialog = gnome_password_dialog_new(_("Authentication Required"),
						   message,
						   self->runtime_username,
						   self->runtime_password,
						   FALSE);
    g_free(message);

    eel_add_weak_pointer(&selfp->auth_dialog);

    gnome_password_dialog_set_show_userpass_buttons(GNOME_PASSWORD_DIALOG(selfp->auth_dialog), FALSE);
    gnome_password_dialog_set_readonly_username(GNOME_PASSWORD_DIALOG(selfp->auth_dialog), username == NULL);
    gnome_password_dialog_set_show_password(GNOME_PASSWORD_DIALOG(selfp->auth_dialog), password != NULL);

    ok = gnome_password_dialog_run_and_block(GNOME_PASSWORD_DIALOG(selfp->auth_dialog));
    if (ok)
      {
	if (username)
	  *username = gnome_password_dialog_get_username(GNOME_PASSWORD_DIALOG(selfp->auth_dialog));
	if (password)
	  *password = gnome_password_dialog_get_password(GNOME_PASSWORD_DIALOG(selfp->auth_dialog));
      }

    gtk_widget_destroy(selfp->auth_dialog);

    return ok;
  }

  private char *
    build_auth_id (self, const char *username)
  {
    return g_strdup_printf("%s:%s:%i:%i:%s",
			   MN_MAILBOX_GET_CLASS(self)->type,
			   self->hostname,
			   self->runtime_port,
			   self->connection_type,
			   username);
  }

  private char *
    get_password (self, const char *username (check null))
  {
    char *auth_id;
    char *password;

    auth_id = self_build_auth_id(self, username);

    G_LOCK(password_database);
    password = g_strdup(g_hash_table_lookup(password_database, auth_id));
    G_UNLOCK(password_database);

    g_free(auth_id);

    return password;
  }

  private void
    set_password (self, const char *username (check null), const char *password)
  {
    char *auth_id;

    auth_id = self_build_auth_id(self, username);

    G_LOCK(password_database);
    if (password)
      g_hash_table_insert(password_database, g_strdup(auth_id), g_strdup(password));
    else
      g_hash_table_remove(password_database, auth_id);
    G_UNLOCK(password_database);

    g_free(auth_id);
  }

  protected void
    session_private_init (self, MNClientSessionPrivate *priv (check null))
  {
    priv->mailbox = MN_MAILBOX(self);
    priv->pi_mailbox = MN_PI_MAILBOX(self);
  }

  protected gboolean
    sasl_get_credentials_cb (MNClientSession *session,
			     MNClientSessionPrivate *priv,
			     const char **username,
			     const char **password)
  {
#if WITH_SASL
    g_return_val_if_fail(username != NULL || password != NULL, FALSE);

    if (self_fill_credentials(priv->pi_mailbox, username != NULL, password != NULL))
      {
	if (username)
	  *username = priv->pi_mailbox->runtime_username;
	if (password)
	  *password = priv->pi_mailbox->runtime_password;

	return TRUE;
      }
    else
      return FALSE;
#else
    g_assert_not_reached();
    return FALSE;
#endif /* WITH_SASL */
  }

  protected void
    notice_cb (MNClientSession *session,
	       const char *message,
	       MNClientSessionPrivate *priv)
  {
    mn_mailbox_notice(priv->mailbox, "%s", message);
  }

  protected void
    warning_cb (MNClientSession *session,
		const char *message,
		MNClientSessionPrivate *priv)
  {
    mn_mailbox_warning(priv->mailbox, "%s", message);
  }
}
