/* 
 * Copyright (c) 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include <gtk/gtk.h>
%}
%{
#include "config.h"
#include <glib/gi18n.h>
#include "mn-mailbox-properties.h"
#include "mn-mailbox-properties-util.h"
#include "mn-util.h"

  static char *current_folder_uri = NULL;
%}

class MN:Autodetect:Mailbox:Properties from Gtk:HBox (interface MN:Mailbox:Properties)
{
  property STRING label (override)
    get { g_value_set_string(VAL, _("<span style=\"italic\">autodetect</span>")); };
  
  private GtkSizeGroup *size_group unrefwith g_object_unref;
  property OBJECT size_group (override, link);
  
  property BOOLEAN complete (override)
    get
    {
      const char *location;
      
      location = gtk_entry_get_text(GTK_ENTRY(SELF(self)->_priv->location_entry));
      g_value_set_boolean(VAL, *location != 0);
    };

  private GtkTooltips *tooltips = {mn_tooltips_new()} unrefwith g_object_unref;
  private GtkWidget *location_entry;

  override (G:Object) GObject *
    constructor (GType type, guint n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    Self *self;
    GtkWidget *hbox;
    GtkWidget *label;
    GtkWidget *button;

    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = SELF(object);

    gtk_box_set_spacing(GTK_BOX(self), 12);
    
    label = gtk_label_new_with_mnemonic(_("_Location:"));
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
    
    hbox = gtk_hbox_new(FALSE, 6);
    
    selfp->location_entry = gtk_entry_new();
    button = gtk_button_new_with_mnemonic(_("_Browse..."));
    
    gtk_label_set_mnemonic_widget(GTK_LABEL(label), selfp->location_entry);
    gtk_entry_set_activates_default(GTK_ENTRY(selfp->location_entry), TRUE);

    mn_tooltips_set_tip(selfp->tooltips,
			selfp->location_entry,
			_("The URI of the mailbox"));

    gtk_box_pack_start(GTK_BOX(hbox), selfp->location_entry, TRUE, TRUE, 0);
    gtk_box_pack_start(GTK_BOX(hbox), button, FALSE, FALSE, 0);
    
    gtk_box_pack_start(GTK_BOX(self), label, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(self), hbox, TRUE, TRUE, 0);
    
    gtk_widget_show(label);
    gtk_widget_show_all(hbox);

    gtk_size_group_add_widget(selfp->size_group, label);

    g_signal_connect(selfp->location_entry, "changed", G_CALLBACK(self_entry_changed_h), self);
    g_signal_connect(button, "clicked", G_CALLBACK(self_browse_clicked_h), self);

    return object;
  }

  private void
    entry_changed_h (Gtk:Editable *editable (check null type),
		     gpointer user_data (check null))
  {
    Self *self = user_data;
    g_object_notify(G_OBJECT(self), "complete");
  }

  private void
    browse_clicked_h (Gtk:Button *button (check null type),
		      gpointer user_data (check null))
  {
    Self *self = user_data;
    GtkWidget *toplevel;
    GtkWidget *chooser;
    const char *location;

    toplevel = gtk_widget_get_toplevel(GTK_WIDGET(button));
    chooser = gtk_file_chooser_dialog_new_with_backend(_("Select a File or Folder"),
						       GTK_WINDOW(toplevel),
						       GTK_FILE_CHOOSER_ACTION_OPEN,
						       "gnome-vfs",
						       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
						       GTK_STOCK_OPEN, 1,
						       NULL);
    
    gtk_file_chooser_set_local_only(GTK_FILE_CHOOSER(chooser), FALSE);
    mn_file_chooser_dialog_allow_select_folder(GTK_FILE_CHOOSER_DIALOG(chooser), 1);

    location = gtk_entry_get_text(GTK_ENTRY(selfp->location_entry));
    if (*location)
      gtk_file_chooser_set_uri(GTK_FILE_CHOOSER(chooser), location);
    else if (current_folder_uri)
      gtk_file_chooser_set_current_folder_uri(GTK_FILE_CHOOSER(chooser), current_folder_uri);
      
    g_signal_connect(chooser, "current-folder-changed", G_CALLBACK(self_current_folder_changed_h), self);

    if (gtk_dialog_run(GTK_DIALOG(chooser)) == 1)
      {
	char *uri;
	
	uri = gtk_file_chooser_get_uri(GTK_FILE_CHOOSER(chooser));
	gtk_entry_set_text(GTK_ENTRY(selfp->location_entry), uri);
	g_free(uri);
      }
    
    gtk_widget_destroy(chooser);
  }
  
  private void
    current_folder_changed_h (Gtk:File:Chooser *chooser (check null type),
			      gpointer user_data)
  {
    g_free(current_folder_uri);
    current_folder_uri = gtk_file_chooser_get_current_folder_uri(chooser);
  }
  
  interface MN:Mailbox:Properties private gboolean
    set_uri (MN:Mailbox:Properties *self (check null type),
	     MN:URI *uri (check null type))
  {
    gtk_entry_set_text(GTK_ENTRY(SELF(self)->_priv->location_entry), uri->text);
    return TRUE;
  }

  interface MN:Mailbox:Properties private MNURI *
    get_uri (MN:Mailbox:Properties *self (check null type))
  {
    const char *location;

    location = gtk_entry_get_text(GTK_ENTRY(SELF(self)->_priv->location_entry));
    return mn_uri_new(location);
  }
}
