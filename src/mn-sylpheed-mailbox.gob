/* 
 * Copyright (c) 2003, 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include "mn-mailbox.h"
%}
%{
#include "config.h"
#include <stdlib.h>
#include <glib/gi18n-lib.h>
#include "mn-mailbox-private.h"
#include "mn-vfs.h"
#include "mn-util.h"
#ifdef WITH_MIME
#include "mn-message-mime.h"
#endif

/* taken from procmsg.h in the Sylpheed sources */
#define SYLPHEED_MSG_NEW		(1U << 0)
#define SYLPHEED_MSG_UNREAD		(1U << 1)

/* taken from defs.h in the Sylpheed sources */
#define SYLPHEED_MARK_FILE		".sylpheed_mark"
#define SYLPHEED_MARK_VERSION		2

  typedef struct
  {
    int		num;
    guint32	flags;
  } MarkEntry;
%}

class MN:Sylpheed:Mailbox from MN:Mailbox
{
  class_init (class) 
  {
    MN_MAILBOX_CLASS(class)->format = "Sylpheed";
  }

  override (G:Object) GObject *
    constructor (GType type, guint n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    MNMailbox *self;

    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = MN_MAILBOX(object);
    
    GDK_THREADS_ENTER();

    mn_mailbox_monitor(self,
		       self->uri->text,
		       GNOME_VFS_MONITOR_DIRECTORY,
		       MN_MAILBOX_MONITOR_EVENT_CHANGED
		       | MN_MAILBOX_MONITOR_EVENT_DELETED
		       | MN_MAILBOX_MONITOR_EVENT_CREATED);

    gdk_flush();
    GDK_THREADS_LEAVE();

    return object;
  }
  
  override (MN:Mailbox) gboolean
    impl_is (MNMailbox *dummy, MN:URI *uri (check null type))
  {
    gboolean is = FALSE;

    if (uri->vfs)
      {
	GnomeVFSURI *markfile_uri;

	markfile_uri = gnome_vfs_uri_append_file_name(uri->vfs, SYLPHEED_MARK_FILE);
	is = mn_vfs_test(markfile_uri, G_FILE_TEST_IS_REGULAR);
	gnome_vfs_uri_unref(markfile_uri);
      }

    return is;
  }

  override (MN:Mailbox) void
    impl_threaded_check (MN:Mailbox *self (check null type))
  {
    GnomeVFSResult result;
    GnomeVFSResult close_result;
    GnomeVFSDirectoryHandle *handle;
    GnomeVFSFileInfo *file_info;
#ifdef WITH_MIME
    GHashTable *seen_numbers;
    GSList *messages = NULL;
#else /* WITH_MIME */
    int total_count = 0;
    int mark_count = 0;
#endif /* WITH_MIME */

#ifdef WITH_MIME
    seen_numbers = self_get_seen_numbers(SELF(self));
#endif

    result = gnome_vfs_directory_open_from_uri(&handle, self->uri->vfs, GNOME_VFS_FILE_INFO_FOLLOW_LINKS);
    if (result != GNOME_VFS_OK)
      {
	GDK_THREADS_ENTER();
	
	mn_mailbox_set_error(self, _("unable to open folder: %s"), gnome_vfs_result_to_string(result));
	mn_mailbox_end_check(self);
	
	gdk_flush();
	GDK_THREADS_LEAVE();
	
	return;
      }

    file_info = gnome_vfs_file_info_new();
    while ((result = gnome_vfs_directory_read_next(handle, file_info)) == GNOME_VFS_OK)
      {
	if (file_info->name[0] != '.')
	  {
	    if (mn_str_isnumeric(file_info->name))
	      {
#ifdef WITH_MIME
		int num = atoi(file_info->name);
		
		if (! g_hash_table_lookup(seen_numbers, GINT_TO_POINTER(num)))
		  {
		    GnomeVFSURI *message_uri;

		    message_uri = gnome_vfs_uri_append_file_name(self->uri->vfs, file_info->name);
		    messages = g_slist_append(messages, mn_message_new_from_uri(self->uri, message_uri));
		    gnome_vfs_uri_unref(message_uri);
		  }
#else /* WITH_MIME */
		total_count++;
#endif
	      }
	  }
#ifndef WITH_MIME
	else if (! strcmp(file_info->name, SYLPHEED_MARK_FILE) && file_info->valid_fields & GNOME_VFS_FILE_INFO_FIELDS_SIZE)
	  /*
	   * Format of a Sylpheed markfile:
	   * int version, int num, guint32 flags, int num, guint32 flags, ...
	   */
	  mark_count = (file_info->size - sizeof(int)) / (sizeof(int) + sizeof(guint32));
#endif /* ! WITH_MIME */
      }
    gnome_vfs_file_info_unref(file_info);
    close_result = gnome_vfs_directory_close(handle);
    
    GDK_THREADS_ENTER();
    
    if (result == GNOME_VFS_ERROR_EOF)
      {
	if (close_result == GNOME_VFS_OK)
	  {
#ifdef WITH_MIME
	    mn_mailbox_set_has_new(self, messages != NULL);
	    mn_mailbox_set_messages(self, messages);
#else /* WITH_MIME */
	    mn_mailbox_set_has_new(self, total_count != mark_count);
#endif
	  }
	else
	  mn_mailbox_set_error(self, _("unable to close folder: %s"), gnome_vfs_result_to_string(close_result));
      }
    else
      mn_mailbox_set_error(self, _("error while reading folder: %s"), gnome_vfs_result_to_string(result));
    mn_mailbox_end_check(self);

    gdk_flush();
    GDK_THREADS_LEAVE();

#ifdef WITH_MIME
    g_hash_table_destroy(seen_numbers);
    mn_g_object_slist_free(messages);
#endif
  }

  private GHashTable *
    get_seen_numbers (self)
  {
#ifdef WITH_MIME
    GHashTable *seen_numbers;
    char *uri;
    int file_size;
    char *buf;
    
    seen_numbers = g_hash_table_new(g_direct_hash, g_direct_equal);

    uri = g_build_path("/", MN_MAILBOX(self)->uri->text, SYLPHEED_MARK_FILE, NULL);
    if (gnome_vfs_read_entire_file(uri, &file_size, &buf) == GNOME_VFS_OK)
      {
	if (file_size >= sizeof(int) && *((int *) buf) == SYLPHEED_MARK_VERSION)
	  {
	    int pos = sizeof(int);	/* start after version */

	    while (pos + sizeof(MarkEntry) <= file_size)
	      {
		MarkEntry *entry = (MarkEntry *) (buf + pos);
		
		if (! (entry->flags & SYLPHEED_MSG_NEW) && ! (entry->flags & SYLPHEED_MSG_UNREAD))
		  g_hash_table_insert(seen_numbers, GINT_TO_POINTER(entry->num), GINT_TO_POINTER(TRUE));
		
		pos += sizeof(MarkEntry);
	      }
	  }

	g_free(buf);
      }
    g_free(uri);
    
    return seen_numbers;
#else /* WITH_MIME */
    g_return_val_if_reached(NULL);
#endif
  }
}
