/* 
 * Copyright (C) 2004-2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.14

%headertop{
#include <gtk/gtk.h>
#include "mn-authenticated-mailbox-properties.h"
#include "mn-pi-mailbox.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include "mn-mailbox-properties-private.h"
#include "mn-authenticated-mailbox-properties-private.h"
#include "mn-auth-combo-box.h"
#include "mn-util.h"
#include "mn-stock.h"
%}

class MN:PI:Mailbox:Properties from MN:Authenticated:Mailbox:Properties (abstract)
{
  protected GtkWidget *hostname_entry;
  protected GtkWidget *details_vbox;
  protected GtkSizeGroup *details_size_group;
  protected GtkWidget *conn_radio[MN_PI_MAILBOX_N_CONNECTION_TYPES];
  protected GtkWidget *port_spin[MN_PI_MAILBOX_N_CONNECTION_TYPES];
  protected GtkWidget *auth_combo;

  class_init (class)
  {
    MNMailboxPropertiesClass *p_class = MN_MAILBOX_PROPERTIES_CLASS(class);

    p_class->stock_id = MN_STOCK_REMOTE;
  }

  init (self)
  {
    MNMailboxProperties *properties = MN_MAILBOX_PROPERTIES(self);
    MNAuthenticatedMailboxProperties *auth = MN_AUTHENTICATED_MAILBOX_PROPERTIES(self);
    GtkWidget *hbox;
    GtkWidget *label;
    GtkWidget *expander;
    GtkSizeGroup *radio_size_group;
    int i;
    const struct
    {
      MNPIMailboxConnectionType	type;
      const char		*mnemonic;
    } connection_types[] = {
      { MN_PI_MAILBOX_CONNECTION_TYPE_NORMAL,		N_("sta_ndard")			},
      { MN_PI_MAILBOX_CONNECTION_TYPE_INBAND_SSL,	N_("in-band SS_L/TLS")		},
      { MN_PI_MAILBOX_CONNECTION_TYPE_SSL,		N_("SSL/TLS on sepa_rate port")	}
    };

    hbox = mn_authenticated_mailbox_properties_field_new(auth,
							 _("Ho_stname:"),
							 &label,
							 &self->hostname_entry);

    gtk_box_pack_start(GTK_BOX(self), hbox, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(self), auth->username_vbox, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(self), auth->password_vbox, FALSE, FALSE, 0);

    self->details_size_group = gtk_size_group_new(GTK_SIZE_GROUP_NONE);

    gtk_size_group_add_widget(self->details_size_group, auth->username_label);
    gtk_size_group_add_widget(self->details_size_group, auth->password_label);
    gtk_size_group_add_widget(self->details_size_group, label);

    properties->entries = mn_g_slist_append_elements(properties->entries,
						     self->hostname_entry,
						     auth->username_entry,
						     auth->password_entry,
						     NULL);

    /* translators: header capitalization */
    expander = gtk_expander_new_with_mnemonic(_("_Details"));
    gtk_expander_set_spacing(GTK_EXPANDER(expander), 6);

    self->details_vbox = gtk_vbox_new(FALSE, 6);
    gtk_container_add(GTK_CONTAINER(expander), self->details_vbox);

    gtk_box_pack_start(GTK_BOX(self), expander, FALSE, FALSE, 0);
    gtk_widget_show_all(expander);

    radio_size_group = gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL);

    for (i = 0; i < MN_PI_MAILBOX_N_CONNECTION_TYPES; i++)
      {
	self_add_connection_type(self,
				 connection_types[i].type,
				 _(connection_types[i].mnemonic));

	gtk_size_group_add_widget(radio_size_group, self->conn_radio[i]);

	properties->entries = g_slist_append(properties->entries, self->port_spin[i]);
	g_signal_connect(self->conn_radio[i], "toggled", G_CALLBACK(self_radio_toggled_h), self);
      }

    g_object_unref(radio_size_group);

#ifndef WITH_SSL
    gtk_widget_set_sensitive(self->conn_radio[MN_PI_MAILBOX_CONNECTION_TYPE_INBAND_SSL], FALSE);
    gtk_widget_set_sensitive(self->conn_radio[MN_PI_MAILBOX_CONNECTION_TYPE_SSL], FALSE);
#endif

    /* by default, standard is enabled */
    gtk_widget_set_sensitive(self->port_spin[MN_PI_MAILBOX_CONNECTION_TYPE_INBAND_SSL], FALSE);
    gtk_widget_set_sensitive(self->port_spin[MN_PI_MAILBOX_CONNECTION_TYPE_SSL], FALSE);

    self_add_authentication(self);

    g_object_connect(self->hostname_entry,
		     "swapped-signal::changed", mn_mailbox_properties_notify_complete, self,
		     "swapped-signal::changed", mn_mailbox_properties_notify_default_name, self,
		     NULL);

    g_signal_connect_swapped(auth->username_entry, "changed", G_CALLBACK(mn_mailbox_properties_notify_default_name), self);

    g_signal_connect(expander, "notify::expanded", G_CALLBACK(self_notify_expanded_h), self);
  }

  private void
    add_connection_type (self,
			 MNPIMailboxConnectionType type,
			 const char *mnemonic (check null))
  {
    GtkWidget *label;
    GtkWidget *hbox;
    GtkWidget *port_label;

    label = gtk_label_new(type == 0 ? _("Connection type:") : NULL);
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);

    self->conn_radio[type] = type == 0
      ? gtk_radio_button_new_with_mnemonic(NULL, mnemonic)
      : gtk_radio_button_new_with_mnemonic_from_widget(GTK_RADIO_BUTTON(self->conn_radio[0]), mnemonic);

    port_label = gtk_label_new(_("Port:"));

    self->port_spin[type] = gtk_spin_button_new_with_range(0, 0xFFFF, 1);
    gtk_spin_button_set_numeric(GTK_SPIN_BUTTON(self->port_spin[type]), TRUE);

    hbox = gtk_hbox_new(FALSE, 12);
    gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(hbox), self->conn_radio[type], TRUE, TRUE, 0);
    gtk_box_pack_start(GTK_BOX(hbox), port_label, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(hbox), self->port_spin[type], FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(self->details_vbox), hbox, FALSE, FALSE, 0);
    gtk_widget_show_all(hbox);

    gtk_size_group_add_widget(self->details_size_group, label);
  }

  private void
    add_authentication (self)
  {
    GtkWidget *hbox;
    GtkWidget *label;

    hbox = gtk_hbox_new(FALSE, 12);
    label = gtk_label_new_with_mnemonic(_("Authent_ication mechanism:"));
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);

    self->auth_combo = mn_auth_combo_box_new();
    gtk_label_set_mnemonic_widget(GTK_LABEL(label), self->auth_combo);

    gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(hbox), self->auth_combo, TRUE, TRUE, 0);
    gtk_box_pack_start(GTK_BOX(self->details_vbox), hbox, FALSE, FALSE, 0);
    gtk_widget_show_all(hbox);

    gtk_size_group_add_widget(self->details_size_group, label);
  }

  private void
    notify_expanded_h (GObject *object, GParamSpec *pspec, gpointer user_data)
  {
    Self *self = user_data;

    gtk_size_group_set_mode(self->details_size_group,
			    gtk_expander_get_expanded(GTK_EXPANDER(object))
			    ? GTK_SIZE_GROUP_HORIZONTAL
			    : GTK_SIZE_GROUP_NONE);
  }

  private void
    radio_toggled_h (Gtk:Toggle:Button *togglebutton (check null type),
		     gpointer user_data (check null))
  {
    Self *self = user_data;
    int i;

    for (i = 0; i < MN_PI_MAILBOX_N_CONNECTION_TYPES; i++)
      gtk_widget_set_sensitive(self->port_spin[i], GTK_WIDGET_SENSITIVE(self->conn_radio[i]) && gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self->conn_radio[i])));

    g_object_notify(G_OBJECT(self), "complete");
  }

  override (MN:Mailbox:Properties) void
    set_mailbox (MN:Mailbox:Properties *properties (check null type),
		 MN:Mailbox *mailbox (check null type))
  {
    Self *self = SELF(properties);
    MNPIMailbox *pi_mailbox = MN_PI_MAILBOX(mailbox);

    PARENT_HANDLER(properties, mailbox);

    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(self->conn_radio[pi_mailbox->connection_type]), TRUE);
    mn_auth_combo_box_set_active_mechanism(MN_AUTH_COMBO_BOX(self->auth_combo), pi_mailbox->authmech);
    gtk_entry_set_text(GTK_ENTRY(self->hostname_entry), pi_mailbox->hostname);
    gtk_spin_button_set_value(GTK_SPIN_BUTTON(self->port_spin[pi_mailbox->connection_type]), pi_mailbox->runtime_port);
  }

  override (MN:Mailbox:Properties) MNMailbox *
    get_mailbox (MNMailboxProperties *properties)
  {
    MNMailbox *mailbox;
    MNPIMailboxConnectionType connection_type;
    char *authmech;
    const char *hostname;
    int port;

    mailbox = PARENT_HANDLER(properties);

    self_get_contents(SELF(properties),
		      &connection_type,
		      &authmech,
		      &hostname,
		      &port);

    g_object_set(mailbox,
		 MN_PI_MAILBOX_PROP_CONNECTION_TYPE(connection_type),
		 MN_PI_MAILBOX_PROP_AUTHMECH(authmech),
		 MN_PI_MAILBOX_PROP_HOSTNAME((char *) hostname),
		 MN_PI_MAILBOX_PROP_PORT(port),
		 NULL);

    g_free(authmech);

    return mailbox;
  }

  protected void
    get_contents (self,
		  MNPIMailboxConnectionType *connection_type,
		  char **authmech,
		  const char **hostname,
		  int *port)
  {
    MNPIMailboxConnectionType _connection_type;

    if (connection_type || port)
      {
	int i;

	_connection_type = -1;

	for (i = 0; i < MN_PI_MAILBOX_N_CONNECTION_TYPES; i++)
	  if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self->conn_radio[i])))
	    {
	      _connection_type = i;
	      break;
	    }

	g_assert(_connection_type != -1);
      }

    if (connection_type)
      *connection_type = _connection_type;
    if (authmech)
      *authmech = mn_auth_combo_box_get_active_mechanism(MN_AUTH_COMBO_BOX(self->auth_combo));
    if (hostname)
      *hostname = gtk_entry_get_text(GTK_ENTRY(self->hostname_entry));
    if (port)
      *port = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(self->port_spin[_connection_type]));
  }
}
