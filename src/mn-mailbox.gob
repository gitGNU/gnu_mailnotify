/* 
 * Copyright (C) 2003-2005 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.12

%headertop{
#include "config.h"
#include <stdarg.h>
#include <libxml/tree.h>
%}

%h{
#define MN_MAILBOX_MAX_TYPES	6
extern GType mn_mailbox_types[MN_MAILBOX_MAX_TYPES + 1];

typedef struct _MNMailboxConfiguration MNMailboxConfiguration;
%}

%privateheader{
typedef enum
{
  /* save to mailboxes.xml */
  MN_MAILBOX_PARAM_PERMANENT	= 1 << (G_PARAM_USER_SHIFT + 0),

  /* require a string property to be non-empty */
  MN_MAILBOX_PARAM_REQUIRED	= 1 << (G_PARAM_USER_SHIFT + 1),

  /* ignore the case of a string property when checking if it has the default value */
  MN_MAILBOX_PARAM_IGNORE_CASE	= 1 << (G_PARAM_USER_SHIFT + 2)
} MNMailboxParamFlags;
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <eel/eel.h>
#include <libgnomevfs/gnome-vfs.h>
#if defined(WITH_MBOX) || defined(WITH_MH) || defined(WITH_MAILDIR) || defined(WITH_SYLPHEED)
#include "mn-system-vfs-mailbox.h"
#include "mn-custom-vfs-mailbox.h"
#endif
#ifdef WITH_POP3
#include "mn-pop3-mailbox.h"
#endif
#ifdef WITH_IMAP
#include "mn-imap-mailbox.h"
#endif
#ifdef WITH_GMAIL
#include "mn-gmail-mailbox.h"
#endif
#ifdef WITH_EVOLUTION
#include "mn-evolution-mailbox.h"
#endif
#include "mn-util.h"
#include "mn-message.h"

struct _MNMailboxConfiguration
{
  GType		type;
  unsigned int	n_parameters;
  GParameter	*parameters;
};

GType mn_mailbox_types[MN_MAILBOX_MAX_TYPES + 1];
%}

class MN:Mailbox from G:Object
{
  classwide const char *type;

  /**
   * removed:
   * @self: the object which received the signal
   *
   * This signal gets emitted after the mailbox is removed from the
   * mailboxes list.
   **/
  signal NONE (NONE)
    void removed (self);

  public char *runtime_name destroywith g_free;
  
  public char *name destroywith g_free;
  property STRING name (link, flags = MN_MAILBOX_PARAM_PERMANENT);

  public char *stock_id;
  property STRING stock_id (link, export);

  public char *format;
  property STRING format (link, export);

  public gboolean must_poll;
  property BOOLEAN must_poll (default_value = TRUE, link, export, flags = CONSTRUCT);

  public GSList *messages destroywith mn_g_object_slist_free;
  property POINTER messages (export, type = const GSList *)
    set
    {
      GSList *messages;
      GSList *l;
      gboolean changed = FALSE;
      gboolean has_new = FALSE;

      messages = g_value_get_pointer(VAL);
      
      MN_LIST_FOREACH(l, self->messages)
	if (! mn_message_slist_find_by_id(messages, l->data))
	  {
	    changed = TRUE;
	    break;
	  }
      
      MN_LIST_FOREACH(l, messages)
	if (! mn_message_slist_find_by_id(self->messages, l->data))
	  {
	    changed = TRUE;
	    has_new = TRUE;
	    break;
	  }

      mn_g_object_slist_free(self->messages);
      self->messages = mn_g_object_slist_copy(messages);

      if (changed)
	self_messages_changed(self, has_new);
    }
    get
    {
      g_value_set_pointer(VAL, self->messages);
    };

  /**
   * messages-changed:
   * @self: the object which received the signal
   * @has_new: whether a new message has been received or not
   *
   * This signal gets emitted whenever the messages property changes.
   *
   * It is considered that the property changes if a new message
   * appears or if an old message disappears. If an existing message
   * changes while keeping the same id, this signal is not emitted
   * (use the "notify::messages" signal if you need notification of
   * such events).
   **/
  signal private NONE (BOOLEAN)
    void messages_changed (self, gboolean has_new);

  public char *error destroywith g_free;
  property STRING error
    set
    {
      g_free(self->error);
      self->error = g_value_dup_string(VAL);

      /* if an error is set, we unset messages */
      if (self->error)
	self_set_messages(self, NULL);
    }
    get
    {
      g_value_set_string(VAL, self->error);
    };

  protected void
    set_error (self, const char *format, ...)
  {
    va_list args;
    char *error = NULL;

    if (format)
      {
	va_start(args, format);
	error = g_strdup_vprintf(format, args);
	va_end(args);
      }
    
    g_object_set(G_OBJECT(self), MN_MAILBOX_PROP_ERROR(error), NULL);
    g_free(error);
  }
  
  public void
    init_types (void)
  {
    int i = 0;

#if defined(WITH_MBOX) || defined(WITH_MH) || defined(WITH_MAILDIR) || defined(WITH_SYLPHEED)
    /*
     * MNSystemVFSMailbox must be registered before
     * MNCustomVFSMailbox, because the latter's parse_uri() method
     * will accept any URI.
     */
    mn_mailbox_types[i++] = MN_TYPE_SYSTEM_VFS_MAILBOX;
    mn_mailbox_types[i++] = MN_TYPE_CUSTOM_VFS_MAILBOX;
#endif
#ifdef WITH_POP3
    mn_mailbox_types[i++] = MN_TYPE_POP3_MAILBOX;
#endif
#ifdef WITH_IMAP
    mn_mailbox_types[i++] = MN_TYPE_IMAP_MAILBOX;
#endif
#ifdef WITH_GMAIL
    mn_mailbox_types[i++] = MN_TYPE_GMAIL_MAILBOX;
#endif
#ifdef WITH_EVOLUTION
    mn_mailbox_types[i++] = MN_TYPE_EVOLUTION_MAILBOX;
#endif
    mn_mailbox_types[i] = 0;
  }

  private GType
    get_type_from_name (const char *type)
  {
    int i;

    for (i = 0; mn_mailbox_types[i]; i++)
      {
	SelfClass *class;

	class = g_type_class_peek(mn_mailbox_types[i]);
	g_return_val_if_fail(class != NULL, 0);

	if (! strcmp(class->type, type))
	  return mn_mailbox_types[i];
      }

    return 0;
  }

  public MNMailbox *
    new (const char *type, const char *first, ...)
  {
    va_list args;
    GType type_id;
    GObject *object;

    g_return_val_if_fail(type != NULL, NULL);

    type_id = self_get_type_from_name(type);
    if (! type_id)
      return NULL;

    va_start(args, first);
    object = g_object_new_valist(type_id, first, args);
    va_end(args);

    return SELF(object);
  }
  
  public MNMailbox *
    new_from_xml_node (xmlNode *node, GError **err)
  {
    char *type;
    Self *self = NULL;
    GParamSpec **properties;
    unsigned int n_properties;
    int i;

    g_return_val_if_fail(node != NULL, NULL);

    type = xmlGetProp(node, "type");
    if (! type)
      {
	g_set_error(err, 0, 0, _("\"type\" attribute missing"));
	return NULL;
      }

    self = self_new(type, NULL);
    if (! self)
      {
	g_set_error(err, 0, 0, _("unknown mailbox type \"%s\""), type);
	goto end;
      }

    properties = g_object_class_list_properties(G_OBJECT_GET_CLASS(self), &n_properties);
    for (i = 0; i < n_properties; i++)
      if ((properties[i]->flags & MN_MAILBOX_PARAM_PERMANENT) != 0)
	{
	  char *content;

	  content = xmlGetProp(node, g_param_spec_get_name(properties[i]));
	  if (content)
	    {
	      GValue value = { 0, };

	      g_value_init(&value, G_PARAM_SPEC_VALUE_TYPE(properties[i]));

	      if (self_import_string(&value, content))
		g_object_set_property(G_OBJECT(self), g_param_spec_get_name(properties[i]), &value);
	      else
		g_warning(_("property \"%s\": unable to transform string \"%s\" into a value of type \"%s\""),
			  g_param_spec_get_name(properties[i]), content, G_VALUE_TYPE_NAME(&value));

	      g_value_unset(&value);
	      xmlFree(content);
	    }
	}
    g_free(properties);
    
    if (! self_validate(self, err))
      {
	g_object_unref(self);
	self = NULL;
      }
    
  end:
    g_free(type);
    return self;
  }
  
  public xmlNode *
    xml_node_new (self)
  {
    xmlNode *node;
    GParamSpec **properties;
    unsigned int n_properties;
    int i;

    node = xmlNewNode(NULL, "mailbox");
    xmlSetProp(node, "type", SELF_GET_CLASS(self)->type);
    
    properties = g_object_class_list_properties(G_OBJECT_GET_CLASS(self), &n_properties);
    for (i = 0; i < n_properties; i++)
      if ((properties[i]->flags & MN_MAILBOX_PARAM_PERMANENT) != 0)
	{
	  GValue value = { 0, };
	  gboolean is_default;
	  
	  g_value_init(&value, G_PARAM_SPEC_VALUE_TYPE(properties[i]));
	  g_object_get_property(G_OBJECT(self), g_param_spec_get_name(properties[i]), &value);

	  if ((properties[i]->flags & MN_MAILBOX_PARAM_IGNORE_CASE) != 0)
	    {
	      GValue default_value = { 0, };
	      const char *str;
	      const char *default_str;

	      g_assert(G_IS_PARAM_SPEC_STRING(properties[i]));

	      g_value_init(&default_value, G_TYPE_STRING);
	      g_param_value_set_default(properties[i], &default_value);

	      str = g_value_get_string(&value);
	      default_str = g_value_get_string(&default_value);

	      is_default = str && default_str && ! mn_utf8_strcasecmp(str, default_str);

	      g_value_unset(&default_value);
	    }
	  else
	    is_default = g_param_value_defaults(properties[i], &value);
	  
	  if (! is_default)
	    {
	      char *str;

	      str = self_export_string(&value);
	      xmlSetProp(node, g_param_spec_get_name(properties[i]), str);
	      g_free(str);
	    }
	  
	  g_value_unset(&value);
	}
    g_free(properties);

    return node;
  }
  
  public MNMailbox *
    new_from_uri (const char *uri (check null))
  {
    int i;

    for (i = 0; mn_mailbox_types[i]; i++)
      {
	MNMailboxClass *class;

	class = g_type_class_peek(mn_mailbox_types[i]);
	g_return_val_if_fail(class != NULL, NULL);

	if (class->parse_uri)
	  {
	    MNMailbox *mailbox;

	    mailbox = class->parse_uri(NULL, uri);
	    if (mailbox)
	      return mailbox;
	  }
      }
    
    return NULL;
  }
  
  public MNMailbox *
    new_from_configuration (MNMailboxConfiguration *config (check null))
  {
    return g_object_newv(config->type, config->n_parameters, config->parameters);
  }
  
  public MNMailboxConfiguration *
    get_configuration (self)
  {
    GObject *object = G_OBJECT(self);
    GArray *parameters;
    GParamSpec **properties;
    unsigned int n_properties;
    int i;
    MNMailboxConfiguration *config;

    parameters = g_array_new(FALSE, FALSE, sizeof(GParameter));

    properties = g_object_class_list_properties(G_OBJECT_GET_CLASS(self), &n_properties);
    for (i = 0; i < n_properties; i++)
      if ((properties[i]->flags & MN_MAILBOX_PARAM_PERMANENT) != 0)
	{
	  GParameter parameter = { NULL, { 0, } };

	  parameter.name = g_param_spec_get_name(properties[i]);

	  g_value_init(&parameter.value, G_PARAM_SPEC_VALUE_TYPE(properties[i]));
	  g_object_get_property(object, parameter.name, &parameter.value);
	  
	  g_array_append_val(parameters, parameter);
	}
    g_free(properties);

    config = g_new0(MNMailboxConfiguration, 1);
    config->type = G_OBJECT_TYPE(self);
    config->n_parameters = parameters->len;
    config->parameters = (GParameter *) g_array_free(parameters, FALSE);

    return config;
  }

  public void
    configuration_free (MNMailboxConfiguration *config (check null))
  {
    int i;

    for (i = 0; i < config->n_parameters; i++)
      g_value_unset(&config->parameters[i].value);

    g_free(config->parameters);
    g_free(config);
  }

  public MNMailbox *
    new_from_obsolete_uri (const char *uri (check null))
  {
    char *real_uri;
    char *scheme;
    gboolean obsolete = FALSE;
    Self *self = NULL;

    real_uri = g_str_has_prefix(uri, "pop3:") /* also handle very old pop3 locators */
      ? g_strconcat("pop://", uri + 5, NULL)
      : g_strdup(uri);

    scheme = gnome_vfs_get_uri_scheme(real_uri);
    if (scheme)
      {
	if (! strcmp(scheme, "pop") || ! strcmp(scheme, "pops")
	    || ! strcmp(scheme, "imap") || ! strcmp(scheme, "imaps")
	    || ! strcmp(scheme, "gmail"))
	  obsolete = TRUE;
	g_free(scheme);
      }

    self = obsolete ? self_parse_obsolete_uri(real_uri) : self_new_from_uri(real_uri);
    g_free(real_uri);

    if (self && ! self_validate(self, NULL))
      {
	g_object_unref(self);
	self = NULL;
      }
    
    return self;
  }
  
  private MNMailbox *
    parse_obsolete_uri (const char *uri (check null))
  {
    int len;
    int buflen;
    char *scheme;
    char *username;
    char *password;
    char *authmech;
    char *hostname;
    int port;
    char *path;
    char **queries;
    Self *self = NULL;

    len = strlen(uri);
    buflen = len + 1;

    {
      char *pat;
      char scheme_buf[buflen];
      char auth_buf[buflen];
      char location_buf[buflen];
      char username_buf[buflen];
      char password_buf[buflen];
      char authmech_buf[buflen];
      char hostname_buf[buflen];
      int _port;
      char path_buf[buflen];
      char queries_buf[buflen];
      gboolean has_location = FALSE;
      gboolean has_password = FALSE;
      gboolean has_authmech = FALSE;
      gboolean has_port = FALSE;
      gboolean has_path = FALSE;
      gboolean has_queries = FALSE;
      int n;

      /* split URI in 3 parts: scheme, auth and location */

      pat = g_strdup_printf("%%%i[^:]://%%%i[^@]@%%%is", len, len, len);
      n = sscanf(uri, pat, scheme_buf, auth_buf, location_buf);
      g_free(pat);

      if (n >= 2)
	{
	  if (n == 3)
	    has_location = TRUE;
	}
      else
	return NULL;		/* unparsable */

      /* split auth part in 3 subparts: username, password and authmech */

      /*
       * For backward compatibility with previous versions of Mail
       * Notification, we also support ;auth= (in lowercase).
       */
      
      pat = g_strdup_printf("%%%i[^:]:%%%i[^;];%%*1[aA]%%*1[uU]%%*1[tT]%%*1[hH]=%%%is", len, len, len);
      n = sscanf(auth_buf, pat, username_buf, password_buf, authmech_buf);
      g_free(pat);

      if (n >= 2)
	{
	  has_password = TRUE;
	  if (n == 3)
	    has_authmech = TRUE;
	}
      else
	{
	  pat = g_strdup_printf("%%%i[^;];%%*1[aA]%%*1[uU]%%*1[tT]%%*1[hH]=%%%is", len, len);
	  n = sscanf(auth_buf, pat, username_buf, authmech_buf);
	  g_free(pat);

	  if (n >= 1)
	    {
	      if (n == 2)
		has_authmech = TRUE;
	    }
	  else
	    return NULL;	/* unparsable */
	}

      if (has_location)
	{
	  char hostport_buf[buflen];

	  /* split location part in 3 subparts: hostport, path and queries */

	  pat = g_strdup_printf("%%%i[^/]/%%%i[^?]?%%%is", len, len, len);
	  n = sscanf(location_buf, pat, hostport_buf, path_buf, queries_buf);
	  g_free(pat);

	  if (n >= 2)
	    {
	      has_path = TRUE;
	      if (n == 3)
		has_queries = TRUE;
	    }
	  else
	    {
	      pat = g_strdup_printf("%%%i[^?]?%%%is", len, len);
	      n = sscanf(location_buf, pat, hostport_buf, queries_buf);
	      g_free(pat);

	      if (n == 2)
		has_queries = TRUE;
	    }

	  /* split hostport in 2 subparts: host and port */

	  pat = g_strdup_printf("[%%%i[^]]]:%%u", len);
	  n = sscanf(hostport_buf, pat, hostname_buf, &_port);
	  g_free(pat);
	
	  if (n < 1)
	    {
	      pat = g_strdup_printf("%%%i[^:]:%%u", len);
	      n = sscanf(hostport_buf, pat, hostname_buf, &_port);
	      g_free(pat);
	    }
	
	  if (n == 2)
	    has_port = TRUE;
	}

      scheme = gnome_vfs_unescape_string(scheme_buf, NULL);
      username = gnome_vfs_unescape_string(username_buf, NULL);
      password = has_password ? gnome_vfs_unescape_string(password_buf, NULL) : NULL;
      authmech = has_authmech ? gnome_vfs_unescape_string(authmech_buf, NULL) : NULL;
      hostname = has_location ? gnome_vfs_unescape_string(hostname_buf, NULL) : NULL;
      port = has_port ? _port : 0;
      path = has_path ? gnome_vfs_unescape_string(path_buf, NULL) : NULL;
      if (has_queries)
	{
	  int i;
	  
	  queries = g_strsplit(queries_buf, "&", 0);
	  for (i = 0; queries[i]; i++)
	    {
	      char *unescaped;

	      unescaped = gnome_vfs_unescape_string(queries[i], NULL);

	      g_free(queries[i]);
	      queries[i] = unescaped;
	    }
	}
      else
	queries = NULL;
    }

    if (! strcmp(scheme, "pop") || ! strcmp(scheme, "pops"))
      {
#ifdef WITH_POP3
	MNPIMailboxConnectionType connection_type;

	if (queries && eel_g_strv_find(queries, "STLS") != -1)
	  connection_type = MN_PI_MAILBOX_CONNECTION_TYPE_INBAND_SSL;
	else
	  connection_type = ! strcmp(scheme, "pops")
	    ? MN_PI_MAILBOX_CONNECTION_TYPE_SSL
	    : MN_PI_MAILBOX_CONNECTION_TYPE_NORMAL;

	self = self_new("pop3",
			"connection-type", connection_type,
			"username", username,
			"password", password,
			"authmech", authmech,
			"hostname", hostname,
			"port", port,
			NULL);
#endif
      }
    else if (! strcmp(scheme, "imap") || ! strcmp(scheme, "imaps"))
      {
#ifdef WITH_IMAP
	MNPIMailboxConnectionType connection_type;

	if (queries && eel_g_strv_find(queries, "STARTTLS") != -1)
	  connection_type = MN_PI_MAILBOX_CONNECTION_TYPE_INBAND_SSL;
	else
	  connection_type = ! strcmp(scheme, "imaps")
	    ? MN_PI_MAILBOX_CONNECTION_TYPE_SSL
	    : MN_PI_MAILBOX_CONNECTION_TYPE_NORMAL;

	self = self_new("imap",
			"connection-type", connection_type,
			"username", username,
			"password", password,
			"authmech", authmech,
			"hostname", hostname,
			"port", port,
			"mailbox", path,
			NULL);

	if (queries && eel_g_strv_find(queries, "noidle") != -1)
	  g_object_set(G_OBJECT(self), "use-idle-extension", MN_IMAP_MAILBOX_USE_IDLE_NEVER, NULL);
#endif
      }
    else if (! strcmp(scheme, "gmail"))
      {
#ifdef WITH_GMAIL
	self = self_new("gmail",
			"username", username,
			"password", password,
			NULL);
#endif
      }

    g_free(scheme);
    g_free(username);
    g_free(password);
    g_free(authmech);
    g_free(hostname);
    g_free(path);
    g_strfreev(queries);

    return self;
  }
  
  private gboolean
    validate (self, GError **err)
  {
    GParamSpec **properties;
    unsigned int n_properties;
    int i;

    properties = g_object_class_list_properties(G_OBJECT_GET_CLASS(self), &n_properties);
    for (i = 0; i < n_properties; i++)
      if ((properties[i]->flags & MN_MAILBOX_PARAM_REQUIRED) != 0)
	{
	  GValue value = { 0, };
	  const char *str;
	  gboolean is_empty;
	  
	  g_return_val_if_fail(G_IS_PARAM_SPEC_STRING(properties[i]), FALSE);
	  
	  g_value_init(&value, G_TYPE_STRING);
	  g_object_get_property(G_OBJECT(self), g_param_spec_get_name(properties[i]), &value);
	  
	  str = g_value_get_string(&value);
	  is_empty = ! str || ! *str;
	  
	  g_value_unset(&value);
	  
	  if (is_empty)
	    {
	      g_set_error(err, 0, 0, _("property \"%s\" has no value"), g_param_spec_get_name(properties[i]));
	      return FALSE;
	    }
	}
    g_free(properties);

    return TRUE;
  }
  
  virtual public void
    seal (self)
  {
    if (self->name)
      {
	g_free(self->runtime_name);
	self->runtime_name = g_strdup(self->name);
      }
  }

  virtual private MNMailbox *
    parse_uri (self, const char *uri);

  virtual public void
    check (self);
  
  protected void
    notice (self, const char *format (check null), ...)
  {
    va_list args;
    char *message;
    
    va_start(args, format);
    message = g_strdup_vprintf(format, args);
    va_end(args);

    mn_info("%s: %s", self->runtime_name, message);
    g_free(message);
  }

  protected void
    warning (self, const char *format (check null), ...)
  {
    va_list args;
    char *message;

    va_start(args, format);
    message = g_strdup_vprintf(format, args);
    va_end(args);

    g_warning("%s: %s", self->runtime_name, message);
    g_free(message);
  }

  private gboolean
    import_string (GValue *value (check null), const char *str (check null))
  {
    g_return_val_if_fail(G_IS_VALUE(value), FALSE);

    if (G_VALUE_HOLDS_BOOLEAN(value))
      {
	if (! strcmp(str, "false"))
	  g_value_set_boolean(value, FALSE);
	else if (! strcmp(str, "true"))
	  g_value_set_boolean(value, TRUE);
	else
	  return FALSE;
      }
    else if (G_VALUE_HOLDS_INT(value))
      {
	int n;
	char *endptr;

	n = strtol(str, &endptr, 10);
	if (*endptr == '\0')	/* successful conversion */
	  g_value_set_int(value, n);
	else
	  return FALSE;
      }
    else if (G_VALUE_HOLDS_STRING(value))
      g_value_set_string(value, str);
    else if (G_VALUE_HOLDS_ENUM(value))
      {
	GEnumClass *enum_class;
	GEnumValue *enum_value;
	gboolean found;

	enum_class = g_type_class_ref(G_VALUE_TYPE(value));
	enum_value = g_enum_get_value_by_nick(enum_class, str);

	if (enum_value)
	  {
	    g_value_set_enum(value, enum_value->value);
	    found = TRUE;
	  }
	else
	  found = FALSE;

	g_type_class_unref(enum_class);

	if (! found)
	  return FALSE;
      }
    else
      g_return_val_if_reached(FALSE);

    return TRUE;
  }
  
  private char *
    export_string (const GValue *value (check null))
  {
    char *str;

    if (G_VALUE_HOLDS_BOOLEAN(value))
      str = g_strdup(g_value_get_boolean(value) ? "true" : "false");
    else if (G_VALUE_HOLDS_INT(value))
      str = g_strdup_printf("%i", g_value_get_int(value));
    else if (G_VALUE_HOLDS_STRING(value))
      str = g_value_dup_string(value);
    else if (G_VALUE_HOLDS_ENUM(value))
      {
	GEnumClass *enum_class;
	GEnumValue *enum_value;

	enum_class = g_type_class_ref(G_VALUE_TYPE(value));
	enum_value = g_enum_get_value(enum_class, g_value_get_enum(value));
	g_return_val_if_fail(enum_value != NULL, NULL);

	str = g_strdup(enum_value->value_nick);
	g_type_class_unref(enum_class);
      }
    else
      g_return_val_if_reached(NULL);

    return str;
  }
}
