/*
 * Mail Notification
 * Copyright (C) 2003-2007 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include <gtk/gtk.h>
#include "mn-authenticated-mailbox-properties.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include "mn-mailbox-properties.h"
#include "mn-mailbox-properties-private.h"
#include "mn-util.h"
#include "mn-properties-dialog.h"
#include "mn-authenticated-mailbox.h"
#include "mn-gmail-mailbox.h"
#include "mn-stock.h"
%}

class MN:Gmail:Mailbox:Properties from MN:Authenticated:Mailbox:Properties
{
  /*
   * We do not provide a control for the atom feed location, because
   * modifying it is probably unnecessary.
   */
  private char *location destroywith g_free;

  property STRING default_name (override)
    get
    {
      const char *username;

      username = gtk_entry_get_text(GTK_ENTRY(MN_AUTHENTICATED_MAILBOX_PROPERTIES(self)->username_entry));

      g_value_take_string(VAL, mn_gmail_mailbox_build_name(*username ? username : NULL));
    };

  class_init (class)
  {
    MNMailboxPropertiesClass *p_class = MN_MAILBOX_PROPERTIES_CLASS(class);

    p_class->type = "gmail";
    p_class->stock_id = MN_STOCK_GMAIL;
    p_class->combo_label = "Gmail";
  }

  init (self)
  {
    MNMailboxProperties *properties = MN_MAILBOX_PROPERTIES(self);
    MNAuthenticatedMailboxProperties *auth = MN_AUTHENTICATED_MAILBOX_PROPERTIES(self);

    gtk_box_pack_start(GTK_BOX(auth->account_vbox), auth->username_vbox, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(auth->account_vbox), auth->password_vbox, FALSE, FALSE, 0);

    properties->entries = mn_g_slist_append_elements(properties->entries,
						     auth->username_entry,
						     auth->password_entry,
						     NULL);

    g_signal_connect_swapped(auth->username_entry, "changed", G_CALLBACK(mn_mailbox_properties_notify_default_name), self);
  }

  override (MN:Mailbox:Properties) void
    set_mailbox (MNMailboxProperties *properties, MN:Mailbox *mailbox)
  {
    Self *self = SELF(properties);
    MNGmailMailbox *gmail_mailbox = MN_GMAIL_MAILBOX(mailbox);

    PARENT_HANDLER(properties, mailbox);

    selfp->location = g_strdup(gmail_mailbox->location);
  }

  override (MN:Mailbox:Properties) MNMailbox *
    get_mailbox (MNMailboxProperties *properties)
  {
    Self *self = SELF(properties);
    MNMailbox *mailbox;

    mailbox = PARENT_HANDLER(properties);

    if (selfp->location)
      g_object_set(mailbox, MN_GMAIL_MAILBOX_PROP_LOCATION(selfp->location), NULL);

    return mailbox;
  }
}
