/* 
 * Mail Notification
 * Copyright (C) 2003-2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-vfs-mailbox.h"
#include "mn-vfs-message.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <gtk/gtk.h>
#include "mn-mailbox-private.h"
#include "mn-reentrant-mailbox-private.h"
#include "mn-vfs-mailbox-private.h"
#include "mn-conf.h"
#include "mn-util.h"
%}

class MN:VFS:Mailbox:Backend from G:Object (abstract)
{
  classwide const char *format;

  /*
   * In order to not create reference cycles, we do not hold a
   * reference to the mailbox. The code is arranged so that a VFS
   * backend cannot survive its containing mailbox (no reference to
   * the backend is held outside of the mailbox code).
   */
  protected MNVFSMailbox *mailbox;
  property POINTER mailbox (link, flags = CONSTRUCT_ONLY, type = MNVFSMailbox *);

  override (G:Object) void
    finalize (GObject *object)
  {
    Self *self = SELF(object);

    /*
     * If the calling mailbox is being finalized, there is no need to
     * hold its lock. Otherwise, it holds its lock while finalizing us
     * (see reentrant_check() in mn-vfs-mailbox.gob).
     */
    mn_vfs_mailbox_remove_monitors_by_owner(self->mailbox, self);

    PARENT_HANDLER(object);
  }

  protected void
    monitor (self,
	     unsigned long check_id,
	     const char *uri (check null),
	     GnomeVFSMonitorType type)
  {
    mn_reentrant_mailbox_lock(MN_REENTRANT_MAILBOX(self->mailbox));
    mn_vfs_mailbox_monitor(self->mailbox, uri, self, type, self_real_monitor_cb, self);
    mn_reentrant_mailbox_unlock(MN_REENTRANT_MAILBOX(self->mailbox));
  }

  private void
    real_monitor_cb (GnomeVFSMonitorHandle *handle,
		     const char *monitor_uri,
		     const char *info_uri,
		     GnomeVFSMonitorEventType event_type,
		     gpointer user_data)
  {
    self_monitor_cb(user_data, info_uri, event_type);
  }

  virtual private void
    monitor_cb (self,
		const char *info_uri,
		GnomeVFSMonitorEventType event_type)
  {
    if (event_type == GNOME_VFS_MONITOR_EVENT_CHANGED
	|| event_type == GNOME_VFS_MONITOR_EVENT_DELETED
	|| event_type == GNOME_VFS_MONITOR_EVENT_CREATED)
      mn_reentrant_mailbox_queue_check(MN_REENTRANT_MAILBOX(self->mailbox));
  }

  virtual public gboolean
    is (self, MNVFSMailboxBackendClass *class, MN:VFS:Mailbox *mailbox);

  virtual public void
    check (self, unsigned long check_id);

  virtual public gboolean
    mark_as_read (self, MN:VFS:Message *message, GError **err);
}
