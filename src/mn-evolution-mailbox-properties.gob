/* 
 * Copyright (C) 2005, 2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.14

%headertop{
#include "mn-mailbox-properties.h"
%}

%privateheader{
#include "GNOME_MailNotification_Evolution.h"
#include "mn-corba-object.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <libbonoboui.h>
#include "mn-evolution.h"
#include "mn-evolution-mailbox.h"
#include "mn-stock.h"
%}

class MN:Evolution:Mailbox:Properties from MN:Mailbox:Properties
{
  private GtkWidget *child;
  private GtkWidget *tree;

  private char *uri destroywith g_free;
  private char *name destroywith g_free;

  private MNCORBAObject *glue unrefwith g_object_unref;
  private MNCORBAObject *control unrefwith g_object_unref;

  private Bonobo_PropertyBag pbag = CORBA_OBJECT_NIL
    unref { bonobo_object_release_unref(VAR, NULL); };
  private Bonobo_Listener listener = CORBA_OBJECT_NIL;

  property BOOLEAN complete (override)
    get { g_value_set_boolean(VAL, selfp->tree != NULL && selfp->uri != NULL); };

  property STRING default_name (override)
    get { g_value_set_string(VAL, selfp->name); };

  class_init (class)
  {
    MNMailboxPropertiesClass *p_class = MN_MAILBOX_PROPERTIES_CLASS(class);

    p_class->type = "evolution";
    p_class->stock_id = MN_STOCK_EVOLUTION_MAILBOX;
    p_class->combo_label = "Evolution";
    /* translators: header capitalization */
    p_class->section_label = _("Folder");
  }

  init (self)
  {
    selfp->glue = mn_corba_object_new(MN_EVOLUTION_GLUE_IID);
    g_signal_connect_swapped(selfp->glue, "notify::object", G_CALLBACK(self_update_contents), self);

    selfp->control = mn_corba_object_new(MN_EVOLUTION_FOLDER_TREE_CONTROL_IID);
    g_signal_connect_swapped(selfp->control, "notify::object", G_CALLBACK(self_update_contents), self);

    self_update_contents(self);
  }

  override (G:Object) void
    dispose (GObject *object)
  {
    Self *self = SELF(object);

    /*
     * We are no longer operational after dispose (see unrefwith
     * above), so we must remove our listener.
     */
    if (selfp->listener != CORBA_OBJECT_NIL)
      {
	g_assert(selfp->pbag != CORBA_OBJECT_NIL);

	bonobo_event_source_client_remove_listener(selfp->pbag, selfp->listener, NULL);
	selfp->listener = bonobo_object_release_unref(selfp->listener, NULL);
      }

    PARENT_HANDLER(object);
  }

  private void
    update_contents (self)
  {
    GNOME_MailNotification_Evolution_Glue glue;
    Bonobo_Control control;
    GtkWidget *tree = NULL;

    glue = mn_corba_object_get_object(selfp->glue);
    control = mn_corba_object_get_object(selfp->control);

    if (glue != CORBA_OBJECT_NIL && control != CORBA_OBJECT_NIL)
      {
	BonoboControlFrame *frame;

	tree = bonobo_widget_new_control_from_objref(control, CORBA_OBJECT_NIL);

	frame = bonobo_widget_get_control_frame(BONOBO_WIDGET(tree));

	selfp->pbag = bonobo_control_frame_get_control_property_bag(frame, NULL);
	if (selfp->pbag != CORBA_OBJECT_NIL)
	  {
	    selfp->listener = bonobo_event_source_client_add_listener_full(selfp->pbag,
									   g_cclosure_new(G_CALLBACK(self_selected_uri_changed_cb), self, NULL),
									   "Bonobo/Property:change:selected-uri",
									   NULL);
	    if (selfp->listener != CORBA_OBJECT_NIL)
	      {
		/* give the folder tree a decent height */
		gtk_widget_set_size_request(tree, -1, 150);

		self_set_widget(self, selfp->tree = tree);
		self_sync(self);

		goto end;	/* success */
	      }
	  }
      }

    /* failure */

    if (tree)
      gtk_widget_destroy(tree);
    self_contact_error(self);

  end:
    CORBA_Object_release(glue, NULL);
    CORBA_Object_release(control, NULL);
  }

  private void
    contact_error (self)
  {
    GtkWidget *label;

    selfp->pbag = bonobo_object_release_unref(selfp->pbag, NULL);
    selfp->listener = bonobo_object_release_unref(selfp->listener, NULL);

    label = gtk_label_new(_("Mail Notification can not contact Evolution. Make sure that Evolution is running and that the Evolution Mail Notification plugin is loaded."));

    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
    gtk_label_set_line_wrap(GTK_LABEL(label), TRUE);
    gtk_label_set_selectable(GTK_LABEL(label), TRUE);

    self_set_widget(self, label);
    selfp->tree = NULL;

    g_object_notify(G_OBJECT(self), "complete");
  }

  private void
    set_widget (self, Gtk:Widget *widget (check null type))
  {
    if (selfp->child)
      gtk_widget_destroy(selfp->child);

    gtk_widget_show(widget);
    gtk_box_pack_start(GTK_BOX(self), widget, TRUE, TRUE, 0);

    selfp->child = widget;
  }

  private void
    selected_uri_changed_cb (BonoboListener *listener,
			     const char *event_name,
			     const CORBA_any *any,
			     CORBA_Environment *env,
			     gpointer user_data)
  {
    Self *self = user_data;
    const char *uri;
    CORBA_string name = NULL;

    uri = BONOBO_ARG_GET_STRING(any);

    if (uri && *uri)
      {
	GNOME_MailNotification_Evolution_Glue glue;
	CORBA_Environment name_env;

	glue = mn_corba_object_get_object(selfp->glue);
	if (glue != CORBA_OBJECT_NIL)
	  {
	    CORBA_exception_init(&name_env);

	    name = GNOME_MailNotification_Evolution_Glue_getFolderName(glue, uri, &name_env);
	    if (BONOBO_EX(&name_env))
	      name = NULL;

	    CORBA_exception_free(&name_env);

	    CORBA_Object_release(glue, NULL);
	  }

	if (! name)
	  uri = NULL;
      }

    g_free(selfp->uri);
    selfp->uri = g_strdup(uri);

    g_free(selfp->name);
    selfp->name = g_strdup(name);

    CORBA_free(name);

    g_object_notify(G_OBJECT(self), "complete");
    g_object_notify(G_OBJECT(self), "default-name");
  }

  private void
    sync (self)
  {
    g_return_if_fail(selfp->tree != NULL);

    if (selfp->uri)
      bonobo_widget_set_property(BONOBO_WIDGET(selfp->tree), "selected-uri", BONOBO_ARG_STRING, selfp->uri, NULL);
  }

  override (MN:Mailbox:Properties) void
    set_mailbox (MNMailboxProperties *properties, MNMailbox *mailbox)
  {
    Self *self = SELF(properties);
    MNEvolutionMailbox *evolution_mailbox = MN_EVOLUTION_MAILBOX(mailbox);

    g_free(selfp->uri);
    selfp->uri = g_strdup(evolution_mailbox->uri);

    g_free(selfp->name);
    selfp->name = g_strdup(evolution_mailbox->folder_name);

    if (selfp->tree)
      self_sync(self);
  }

  override (MN:Mailbox:Properties) MNMailbox *
    get_mailbox (MNMailboxProperties *properties)
  {
    Self *self = SELF(properties);
    MNMailbox *mailbox;

    mailbox = PARENT_HANDLER(properties);

    g_object_set(mailbox,
		 MN_EVOLUTION_MAILBOX_PROP_URI(selfp->uri),
		 MN_EVOLUTION_MAILBOX_PROP_FOLDER_NAME(selfp->name),
		 NULL);

    return mailbox;
  }
}
