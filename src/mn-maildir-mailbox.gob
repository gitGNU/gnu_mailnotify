/* 
 * Copyright (c) 2003, 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

%headertop{
#include "mn-mailbox.h"
%}
%{
#include "config.h"
#include <glib/gi18n-lib.h>
#include "mn-mailbox-private.h"
#include "mn-vfs.h"
#include "mn-util.h"
%}

class MN:Maildir:Mailbox from MN:Mailbox
{
  class_init (class)
  {
    MN_MAILBOX_CLASS(class)->format = "Maildir";
  }

  override (G:Object) GObject *
    constructor (GType type, guint n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    MNMailbox *self;
    char *new_uri;
  
    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = MN_MAILBOX(object);

    new_uri = g_build_path("/", self->uri->text, "new", NULL);

    GDK_THREADS_ENTER();

    mn_mailbox_monitor(self,
		       new_uri,
		       GNOME_VFS_MONITOR_DIRECTORY,
		       MN_MAILBOX_MONITOR_EVENT_DELETED
		       | MN_MAILBOX_MONITOR_EVENT_CREATED);

    gdk_flush();
    GDK_THREADS_LEAVE();

    g_free(new_uri);

    return object;
  }

  override (MN:Mailbox) gboolean
    impl_is (MNMailbox *dummy, MN:URI *uri (check null))
  {
    gboolean is = FALSE;

    if (uri->vfs)
      {
	int i; 
	const char *constitutive_dirs[] = { "cur", "new", "tmp" };

	for (i = 0; i < G_N_ELEMENTS(constitutive_dirs); i++)
	  {
	    GnomeVFSURI *dir_uri;
	
	    dir_uri = gnome_vfs_uri_append_path(uri->vfs, constitutive_dirs[i]);
	    is = mn_vfs_test(dir_uri, G_FILE_TEST_IS_DIR);
	    gnome_vfs_uri_unref(dir_uri);
	
	    if (! is)
	      break;
	  }
      }
  
    return is;
  }
  
  override (MN:Mailbox) void
    impl_threaded_check (MN:Mailbox *self (check null type))
  {
    GnomeVFSURI *new_uri;
    GnomeVFSResult result;
    GnomeVFSResult close_result;
    GnomeVFSDirectoryHandle *handle;
    GnomeVFSFileInfo *file_info;
    gboolean has_new = FALSE;
    
    new_uri = gnome_vfs_uri_append_path(self->uri->vfs, "new");
    result = gnome_vfs_directory_open_from_uri(&handle, new_uri, GNOME_VFS_FILE_INFO_FOLLOW_LINKS);
    gnome_vfs_uri_unref(new_uri);

    if (result != GNOME_VFS_OK)
      {
	GDK_THREADS_ENTER();

	mn_mailbox_set_error(self, _("unable to open folder \"new\": %s"), gnome_vfs_result_to_string(result));
	mn_mailbox_end_check(self);

	gdk_flush();
	GDK_THREADS_LEAVE();

	return;
      }
  
    file_info = gnome_vfs_file_info_new();
    while ((result = gnome_vfs_directory_read_next(handle, file_info)) == GNOME_VFS_OK)
      {
	if (file_info->name[0] != '.')
	  {
	    has_new = TRUE;
	    break;
	  }
      }
    gnome_vfs_file_info_unref(file_info);
    close_result = gnome_vfs_directory_close(handle);

    GDK_THREADS_ENTER();

    if (result == GNOME_VFS_OK || result == GNOME_VFS_ERROR_EOF)
      {
	if (close_result == GNOME_VFS_OK)
	  mn_mailbox_set_has_new(self, has_new);
	else
	  mn_mailbox_set_error(self, _("unable to close folder \"new\": %s"), gnome_vfs_result_to_string(close_result));
      }
    else
      mn_mailbox_set_error(self, _("error while reading folder \"new\": %s"), gnome_vfs_result_to_string(result));
    mn_mailbox_end_check(self);

    gdk_flush();
    GDK_THREADS_LEAVE();
  }
}
