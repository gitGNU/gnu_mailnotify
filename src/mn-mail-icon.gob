/*
 * Mail Notification
 * Copyright (C) 2003-2007 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include <gtk/gtk.h>
#include "eggtrayicon.h"
#include "mn-blinking-image.h"
%}

%privateheader{
#include "mn-tooltips.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <gdk/gdkkeysyms.h>
#include "mn-stock.h"
#include "mn-util.h"
%}

class MN:Mail:Icon from Egg:Tray:Icon
{
  private MNTooltips *tooltips = {mn_tooltips_new()} unrefwith g_object_unref;
  private GtkWidget *event_box;
  public GtkWidget *image = {mn_blinking_image_new()};

  private GtkWidget *menu = {gtk_menu_new()} destroywith gtk_widget_destroy;
  public GtkWidget *mail_reader_item;
  public GtkWidget *open_latest_message_item;
  public GtkWidget *update_item;

  signal (ACTION) private NONE (NONE)
    void activate (self);
  signal (ACTION) private NONE (NONE)
    void activate_mail_reader (self);
  signal (ACTION) private NONE (NONE)
    void activate_open_latest_message (self);
  signal (ACTION) private NONE (NONE)
    void activate_update (self);
  signal (ACTION) private NONE (NONE)
    void activate_properties (self);
  signal (ACTION) private NONE (NONE)
    void activate_help (self);
  signal (ACTION) private NONE (NONE)
    void activate_about (self);
  signal (ACTION) private NONE (NONE)
    void activate_remove (self);

  class_init (class)
  {
    GtkBindingSet *binding_set;

    binding_set = gtk_binding_set_by_class(class);

    /* HIG 2.0 key bindings */

    gtk_binding_entry_add_signal(binding_set, GDK_space, 0, "activate", 0);

    gtk_binding_entry_add_signal(binding_set, GDK_Return, GDK_MOD1_MASK, "activate-properties", 0);
    gtk_binding_entry_add_signal(binding_set, GDK_ISO_Enter, GDK_MOD1_MASK, "activate-properties", 0);
    gtk_binding_entry_add_signal(binding_set, GDK_KP_Enter, GDK_MOD1_MASK, "activate-properties", 0);
  }

  init (self)
  {
    GtkMenuShell *shell;
    GtkWidget *properties_item;
    GtkWidget *help_item;
    GtkWidget *about_item;
    GtkWidget *remove_item;

    shell = GTK_MENU_SHELL(selfp->menu);
    /* translators: header capitalization */
    self->mail_reader_item = mn_menu_shell_append(shell, MN_STOCK_MAIL_READER, _("_Mail Reader"));
    /* translators: header capitalization */
    self->open_latest_message_item = mn_menu_shell_append(shell, MN_STOCK_OPEN_MESSAGE, _("_Open Latest Message"));
    /* translators: header capitalization */
    self->update_item = mn_menu_shell_append(shell, GTK_STOCK_REFRESH, _("_Update"));
    mn_menu_shell_append(shell, NULL, NULL);
    properties_item = mn_menu_shell_append(shell, GTK_STOCK_PROPERTIES, NULL);
    help_item = mn_menu_shell_append(shell, GTK_STOCK_HELP, NULL);
    about_item = mn_menu_shell_append(shell, GTK_STOCK_ABOUT, NULL);
    mn_menu_shell_append(shell, NULL, NULL);
    /* translators: header capitalization */
    remove_item = mn_menu_shell_append(shell, GTK_STOCK_REMOVE, _("R_emove From Notification Area"));

    g_signal_connect_swapped(self->mail_reader_item, "activate", G_CALLBACK(self_activate_mail_reader), self);
    g_signal_connect_swapped(self->open_latest_message_item, "activate", G_CALLBACK(self_activate_open_latest_message), self);
    g_signal_connect_swapped(self->update_item, "activate", G_CALLBACK(self_activate_update), self);
    g_signal_connect_swapped(properties_item, "activate", G_CALLBACK(self_activate_properties), self);
    g_signal_connect_swapped(help_item, "activate", G_CALLBACK(self_activate_help), self);
    g_signal_connect_swapped(about_item, "activate", G_CALLBACK(self_activate_about), self);
    g_signal_connect_swapped(remove_item, "activate", G_CALLBACK(self_activate_remove), self);

    selfp->event_box = gtk_event_box_new();
    GTK_WIDGET_SET_FLAGS(selfp->event_box, GTK_CAN_FOCUS);
    gtk_event_box_set_visible_window(GTK_EVENT_BOX(selfp->event_box), FALSE);
    mn_setup_dnd(selfp->event_box);

    gtk_container_add(GTK_CONTAINER(selfp->event_box), self->image);
    gtk_container_add(GTK_CONTAINER(self), selfp->event_box);

    g_object_connect(selfp->event_box,
		     "signal::show-help", self_show_help_h, self,
		     "signal::button-press-event", self_button_press_event_h, self,
		     "signal::button-release-event", self_button_release_event_h, self,
		     "signal::popup-menu", self_popup_menu_h, self,
		     NULL);

    gtk_widget_show(self->image);
    gtk_widget_show(selfp->event_box);
  }

  private gboolean
    show_help_h (GtkWidget *widget,
		 GtkWidgetHelpType help_type,
		 gpointer user_data)
  {
    if (help_type == GTK_WIDGET_HELP_TOOLTIP)
      {
	mn_tooltips_toggle_keyboard_mode(widget);
	return TRUE;
      }
    else
      return FALSE;
  }

  private gboolean
    button_press_event_h (GtkWidget *widget,
			  GdkEventButton *event,
			  gpointer user_data)
  {
    Self *self = user_data;

    if (event->button == 1)
      self_activate(self);
    else if (event->button == 3)
      {
	gtk_menu_popup(GTK_MENU(selfp->menu), NULL, NULL, self_popup_menu_position_cb, self, event->button, event->time);
	return TRUE;		/* do not propagate event */
      }

    return FALSE;		/* propagate event */
  }

  private gboolean
    button_release_event_h (GtkWidget *widget,
			    GdkEventButton *event,
			    gpointer user_data)
  {
    Self *self = user_data;

    if (event->button == 3)
      {
	gtk_menu_popdown(GTK_MENU(selfp->menu));
	return TRUE;		/* do not propagate event */
      }

    return FALSE;		/* propagate event */
  }

  private gboolean
    popup_menu_h (GtkWidget *widget, gpointer user_data)
  {
    Self *self = user_data;

    gtk_menu_popup(GTK_MENU(selfp->menu), NULL, NULL, self_popup_menu_position_cb, self, 0, gtk_get_current_event_time());
    gtk_menu_shell_select_first(GTK_MENU_SHELL(selfp->menu), FALSE);

    return TRUE;		/* a menu was activated */
  }

  private void
    popup_menu_position_cb (GtkMenu *menu,
			    int *x,
			    int *y,
			    gboolean *push_in,
			    gpointer user_data)
  {
    GtkWidget *widget = user_data;

    gdk_window_get_origin(widget->window, x, y);

    *x += widget->allocation.x;
    *y += widget->allocation.y;

    if (*y > gdk_screen_get_height(gtk_widget_get_screen(widget)) / 2)
      {
	GtkRequisition req;

	gtk_widget_size_request(GTK_WIDGET(menu), &req);
	*y -= req.height;
      }
    else
      *y += widget->allocation.height;

    *push_in = TRUE;
  }

  public void
    set_tip (self, const char *tip)
  {
    mn_tooltips_set_tip(selfp->tooltips, selfp->event_box, tip);
  }

  public void
    set_tip_widget (self, Gtk:Widget *tip_widget)
  {
    mn_tooltips_set_tip_widget(selfp->tooltips, selfp->event_box, tip_widget);
  }

  public GtkWidget *
    new (void)
  {
    return GTK_WIDGET(GET_NEW_VARG("title", _("Mail Notification"), NULL));
  }
}
