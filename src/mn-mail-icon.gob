/*
 * Mail Notification
 * Copyright (C) 2003-2008 Jean-Yves Lefort <jylefort@brutele.be>
 * Copyright Â© 2011 Stephen Kitt <steve@sk2.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

%headertop{
#include <gio/gio.h>
#include <gtk/gtk.h>
%}

%{
#include <glib/gi18n.h>
#include <gdk/gdkkeysyms.h>
#include "mn-stock.h"
#include "mn-util.h"
%}

class MN:Mail:Icon from Gtk:Status:Icon
{
  // Tooltip to be displayed
  private const char *tip_string = NULL;
  private GtkWidget *tip_widget = NULL;

  // Numerable icon used in the status icon
  private GIcon *icon;

  private char *stock_id destroywith g_free;
  private int size;

  private int count;
  property INT count (export)
    set {
      int count = g_value_get_int(VAL);
      if (count != selfp->count) {
	selfp->count = count;
	if (selfp->icon != NULL) {
	  gtk_numerable_icon_set_count(GTK_NUMERABLE_ICON(selfp->icon), count);
	}
	//	  self_update_image(self);
      }
    }
    get {
      g_value_set_int(VAL, selfp->count);
    };

  private GtkWidget *menu = {gtk_menu_new()} destroywith gtk_widget_destroy;
  public GtkWidget *mail_reader_item;
  public GtkWidget *open_latest_message_item;
  public GtkWidget *update_item;
  public GtkWidget *consider_new_mail_as_read_item;

  //  signal (ACTION) private NONE (NONE)
  //    void activate (self);
  signal (ACTION) private NONE (NONE)
    void activate_mail_reader (self);
  signal (ACTION) private NONE (NONE)
    void activate_open_latest_message (self);
  signal (ACTION) private NONE (NONE)
    void activate_consider_new_mail_as_read (self);
  signal (ACTION) private NONE (NONE)
    void activate_update (self);
  signal (ACTION) private NONE (NONE)
    void activate_properties (self);
  signal (ACTION) private NONE (NONE)
    void activate_help (self);
  signal (ACTION) private NONE (NONE)
    void activate_about (self);
  signal (ACTION) private NONE (NONE)
    void activate_remove (self);

  init (self)
  {
    GtkMenuShell *shell;
    GtkWidget *properties_item;
    GtkWidget *help_item;
    GtkWidget *about_item;
    GtkWidget *remove_item;

    shell = GTK_MENU_SHELL(selfp->menu);
    /* translators: header capitalization */
    self->mail_reader_item = mn_menu_shell_append(shell, MN_STOCK_MAIL_READER, _("_Mail Reader"));
    /* translators: header capitalization */
    self->open_latest_message_item = mn_menu_shell_append(shell, MN_STOCK_OPEN_MESSAGE, _("_Open Latest Message"));

    mn_menu_shell_append(shell, NULL, NULL);

    /* translators: header capitalization */
    self->consider_new_mail_as_read_item = mn_menu_shell_append(shell, MN_STOCK_CONSIDER_NEW_MAIL_AS_READ, _("_Consider New Mail as Read"));
    /* translators: header capitalization */
    self->update_item = mn_menu_shell_append(shell, GTK_STOCK_REFRESH, _("_Update"));

    mn_menu_shell_append(shell, NULL, NULL);

    properties_item = mn_menu_shell_append(shell, GTK_STOCK_PROPERTIES, NULL);
    help_item = mn_menu_shell_append(shell, GTK_STOCK_HELP, NULL);
    about_item = mn_menu_shell_append(shell, GTK_STOCK_ABOUT, NULL);

    mn_menu_shell_append(shell, NULL, NULL);

    /* translators: header capitalization */
    remove_item = mn_menu_shell_append(shell, GTK_STOCK_REMOVE, _("R_emove From Notification Area"));

    g_signal_connect_swapped(self->mail_reader_item, "activate", G_CALLBACK(self_activate_mail_reader), self);
    g_signal_connect_swapped(self->open_latest_message_item, "activate", G_CALLBACK(self_activate_open_latest_message), self);
    g_signal_connect_swapped(self->consider_new_mail_as_read_item, "activate", G_CALLBACK(self_activate_consider_new_mail_as_read), self);
    g_signal_connect_swapped(self->update_item, "activate", G_CALLBACK(self_activate_update), self);
    g_signal_connect_swapped(properties_item, "activate", G_CALLBACK(self_activate_properties), self);
    g_signal_connect_swapped(help_item, "activate", G_CALLBACK(self_activate_help), self);
    g_signal_connect_swapped(about_item, "activate", G_CALLBACK(self_activate_about), self);
    g_signal_connect_swapped(remove_item, "activate", G_CALLBACK(self_activate_remove), self);

    //    gtk_widget_add_events(GTK_WIDGET(self), GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);

    //    gtk_container_add(GTK_CONTAINER(self), selfp->widget);

    g_object_connect(self,
		     "signal::popup-menu", self_popup_menu_event_h, self,
		     "signal::query-tooltip", self_query_tooltip_event_h, self,
		     NULL);

    //    g_signal_connect(selfp->widget, "size-allocate", G_CALLBACK(self_size_allocate_h), self);

    gtk_status_icon_set_title(GTK_STATUS_ICON(self), _("Mail Notification"));

    //    gtk_widget_show(selfp->widget);
    gtk_status_icon_set_visible(GTK_STATUS_ICON(self), TRUE);
  }

  private void
    update_image (self)
  {
    //    GtkIconSize size;

    //    size = self_find_icon_size(selfp, selfp->size);
    //    mn_mail_icon_widget_set_from_stock(MN_MAIL_ICON_WIDGET(selfp->widget), selfp->stock_id, size);
    if (selfp->icon != NULL)
      g_object_unref(selfp->icon);
    GIcon *tmpicon = g_themed_icon_new("mail-message-new"); //selfp->stock_id
    selfp->icon = gtk_numerable_icon_new(tmpicon);
    g_object_unref(tmpicon);
    gtk_numerable_icon_set_count(GTK_NUMERABLE_ICON(selfp->icon), selfp->count);
    gtk_status_icon_set_from_gicon(GTK_STATUS_ICON(self), selfp->icon);
  }

  private gboolean
    popup_menu_event_h (GtkStatusIcon *status,
			guint button,
			guint activate_time,
			gpointer user_data)
  {
    Self *self = status;

    gtk_menu_popup(GTK_MENU(selfp->menu), NULL, NULL, gtk_status_icon_position_menu, self, button, activate_time);
    return TRUE;		/* do not propagate event */
  }

  private gboolean
    query_tooltip_event_h (GtkStatusIcon *status,
			   gint x,
			   gint y,
			   gboolean keyboard_mode,
			   GtkTooltip *tooltip,
			   gpointer user_data)
  {
    Self *self = status;
    if (selfp->tip_string != NULL) {
      gtk_tooltip_set_text(tooltip, selfp->tip_string);
      return TRUE;
    } else if (selfp->tip_widget != NULL) {
      gtk_tooltip_set_custom(tooltip, selfp->tip_widget);
      return TRUE;
    }
    return FALSE;
  }

  public void
    set_from_stock (self, const char *stock_id)
  {
    g_free(selfp->stock_id);
    selfp->stock_id = g_strdup(stock_id);

    self_update_image(self);
  }

  public void
    set_tip_string (self, const char *tip)
  {
    selfp->tip_string = tip;
    if (selfp->tip_widget != NULL) {
      GtkWidget *old = selfp->tip_widget;
      selfp->tip_widget = NULL;
      g_object_unref(old);
    }
    gtk_status_icon_set_has_tooltip(GTK_STATUS_ICON(self), TRUE);
  }

  public void
    set_tip_widget (self, const GtkWidget *widget)
  {
    selfp->tip_string = NULL;
    if (selfp->tip_widget != NULL) {
      GtkWidget *old = selfp->tip_widget;
      selfp->tip_widget = NULL;
      g_object_unref(old);
    }
    g_object_ref(widget);
    selfp->tip_widget = widget;
    gtk_status_icon_set_has_tooltip(GTK_STATUS_ICON(self), TRUE);
  }

  public GtkStatusIcon *
    new (void)
  {
    return GTK_STATUS_ICON(GET_NEW);
  }
}
