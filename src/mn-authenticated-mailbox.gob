/* 
 * Copyright (c) 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include <gtk/gtk.h>
#include "mn-mailbox.h"
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <eel/eel.h>
#include "mn-mailbox-private.h"
#include "mn-util.h"
%}

class MN:Authenticated:Mailbox from MN:Mailbox
{
  protected char *password = NULL destroywith g_free;
  protected gboolean cancelled;
  private gboolean authentication_failed;
  private GtkWidget *dialog;

  override (MN:Mailbox) void
    removed (MN:Mailbox *mailbox (check null type))
  {
    Self *self = SELF(mailbox);

    if (selfp->dialog)
      gtk_dialog_response(GTK_DIALOG(selfp->dialog), GTK_RESPONSE_CANCEL);

    PARENT_HANDLER(mailbox);
  }

  override (MN:Mailbox) void
    impl_check (MN:Mailbox *mailbox (check null type))
  {
    Self *self = SELF(mailbox);
    selfp->authentication_failed = FALSE;
  }
  
  protected void
    authentication_failed (self)
  {
    g_free(self->password);
    self->password = NULL;
    selfp->authentication_failed = TRUE;
  }
  
  protected void
    fill_password (self)
  {
    self->cancelled = FALSE;
    if (! self->password)
      {
	self->password = g_strdup(MN_MAILBOX(self)->uri->password);
	if (! self->password)
	  {
	    GDK_THREADS_ENTER();

	    self->password = self_password_prompt(self,
						  selfp->authentication_failed
						  ? _("Mail Notification was unable to log into %s mailbox %s, possibly because the password you have entered is invalid.\n\nPlease re-enter your password.")
						  : _("Enter your password for %s mailbox %s."),
						  MN_MAILBOX_GET_CLASS(self)->format,
						  mn_mailbox_get_name(MN_MAILBOX(self)));

	    if (! self->password)
	      self->cancelled = TRUE;
	    
	    gdk_flush();
	    GDK_THREADS_LEAVE();
	  }
      }
  }
  
  private char *
    password_prompt (self, const char *format (check null), ...)
  {
    GtkWidget *label;
    GtkWidget *username_label;
    GtkWidget *username_entry;
    GtkWidget *password_label;
    GtkWidget *password_entry;
    GtkSizeGroup *size_group;
    va_list args;
    char *prompt;
    char *markup;
    char *password = NULL;

    g_return_val_if_fail(selfp->dialog == NULL, NULL);

    mn_create_interface("authentication",
			"dialog", &selfp->dialog,
			"label", &label,
			"username_label", &username_label,
			"username_entry", &username_entry,
			"password_label", &password_label,
			"password_entry", &password_entry,
			NULL);

    eel_add_weak_pointer(&selfp->dialog);

    gtk_dialog_set_default_response(GTK_DIALOG(selfp->dialog), GTK_RESPONSE_OK);

    size_group = gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL);
    gtk_size_group_add_widget(size_group, username_label);
    gtk_size_group_add_widget(size_group, password_label);
    g_object_unref(size_group);

    va_start(args, format);
    prompt = g_strdup_vprintf(format, args);
    va_end(args);

    markup = g_markup_printf_escaped(_("<span weight=\"bold\" size=\"larger\">Mail Notification requires a password</span>\n"
				       "\n"
				       "%s"),
				     prompt);
    g_free(prompt);

    gtk_label_set_markup(GTK_LABEL(label), markup);
    g_free(markup);

    gtk_entry_set_text(GTK_ENTRY(username_entry), MN_MAILBOX(self)->uri->username);

    if (gtk_dialog_run(GTK_DIALOG(selfp->dialog)) == GTK_RESPONSE_OK)
      password = g_strdup(gtk_entry_get_text(GTK_ENTRY(password_entry)));

    gtk_widget_destroy(selfp->dialog);

    return password;
  }

  /* libglade callbacks */

  public void
    password_prompt_changed_h (gpointer user_data,
			       GtkEditable *editable)
  {
    GtkDialog *dialog = user_data;
    const char *password;

    password = gtk_entry_get_text(GTK_ENTRY(editable));
    gtk_dialog_set_response_sensitive(dialog, GTK_RESPONSE_OK, *password != 0);
  }
}
