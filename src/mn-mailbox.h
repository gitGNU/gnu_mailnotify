/* Generated by GOB (v2.0.11)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include "config.h"
#include <stdarg.h>
#include "mn-message.h"
#include "mn-uri.h"

#ifndef __MN_MAILBOX_H__
#define __MN_MAILBOX_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



#define MN_MAILBOX_N_TYPES		7
  extern GType mn_mailbox_types[MN_MAILBOX_N_TYPES + 1];

#define MN_MAILBOX_CAN_CHECK(self) \
  (MN_MAILBOX_GET_CLASS((self))->impl_check != NULL)
#define MN_MAILBOX_MUST_POLL(self) \
  (MN_MAILBOX_CAN_CHECK((self)) && mn_mailbox_get_must_poll((self)))


/*
 * Type checking and casting macros
 */
#define MN_TYPE_MAILBOX	(mn_mailbox_get_type())
#define MN_MAILBOX(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), mn_mailbox_get_type(), MNMailbox)
#define MN_MAILBOX_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), mn_mailbox_get_type(), MNMailbox const)
#define MN_MAILBOX_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), mn_mailbox_get_type(), MNMailboxClass)
#define MN_IS_MAILBOX(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), mn_mailbox_get_type ())

#define MN_MAILBOX_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), mn_mailbox_get_type(), MNMailboxClass)

/* Private structure type */
typedef struct _MNMailboxPrivate MNMailboxPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_MN_MAILBOX__
#define __TYPEDEF_MN_MAILBOX__
typedef struct _MNMailbox MNMailbox;
#endif
struct _MNMailbox {
	GObject __parent__;
	/*< public >*/
	MNURI * uri;
	/*< private >*/
	MNMailboxPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _MNMailboxClass MNMailboxClass;
struct _MNMailboxClass {
	GObjectClass __parent__;
	/*signal*/void (* removed) (MNMailbox * self);
	/*signal*/void (* messages_changed) (MNMailbox * self, gboolean has_new);
	gboolean (* impl_is) (MNMailbox * self, MNURI * uri);
	void (* impl_check) (MNMailbox * self);
	const char * stock_id;
	const char * format;
};


/*
 * Public methods
 */
GType	mn_mailbox_get_type	(void);
void 	mn_mailbox_removed	(MNMailbox * self);
const char * 	mn_mailbox_get_name	(MNMailbox * self);
gboolean 	mn_mailbox_get_must_poll	(MNMailbox * self);
void 	mn_mailbox_set_must_poll	(MNMailbox * self,
					gboolean val);
gpointer 	mn_mailbox_get_messages	(MNMailbox * self);
void 	mn_mailbox_set_messages	(MNMailbox * self,
					gpointer val);
const char * 	mn_mailbox_get_error	(MNMailbox * self);
void 	mn_mailbox_init_types	(void);
void 	mn_mailbox_new_async	(MNURI * uri,
					gpointer callback,
					gpointer user_data);
void 	mn_mailbox_check	(MNMailbox * self);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define mn_mailbox_connect__removed(object,func,data)	g_signal_connect(MN_MAILBOX(__extension__ ({MNMailbox *___object = (object); ___object; })),"removed",(GCallback) __extension__ ({void (* ___removed) (MNMailbox * ___fake___self, gpointer ___data ) = (func); ___removed; }), (data))
#define mn_mailbox_connect_after__removed(object,func,data)	g_signal_connect_after(MN_MAILBOX(__extension__ ({MNMailbox *___object = (object); ___object; })),"removed",(GCallback) __extension__ ({void (* ___removed) (MNMailbox * ___fake___self, gpointer ___data ) = (func); ___removed; }), (data))
#define mn_mailbox_connect_data__removed(object,func,data,destroy_data,flags)	g_signal_connect_data(MN_MAILBOX(__extension__ ({MNMailbox *___object = (object); ___object; })),"removed",(GCallback) __extension__ ({void (* ___removed) (MNMailbox * ___fake___self, gpointer ___data ) = (func); ___removed; }), (data), (destroy_data), (GConnectFlags)(flags))
#define mn_mailbox_connect__messages_changed(object,func,data)	g_signal_connect(MN_MAILBOX(__extension__ ({MNMailbox *___object = (object); ___object; })),"messages_changed",(GCallback) __extension__ ({void (* ___messages_changed) (MNMailbox * ___fake___self, gboolean ___fake___has_new, gpointer ___data ) = (func); ___messages_changed; }), (data))
#define mn_mailbox_connect_after__messages_changed(object,func,data)	g_signal_connect_after(MN_MAILBOX(__extension__ ({MNMailbox *___object = (object); ___object; })),"messages_changed",(GCallback) __extension__ ({void (* ___messages_changed) (MNMailbox * ___fake___self, gboolean ___fake___has_new, gpointer ___data ) = (func); ___messages_changed; }), (data))
#define mn_mailbox_connect_data__messages_changed(object,func,data,destroy_data,flags)	g_signal_connect_data(MN_MAILBOX(__extension__ ({MNMailbox *___object = (object); ___object; })),"messages_changed",(GCallback) __extension__ ({void (* ___messages_changed) (MNMailbox * ___fake___self, gboolean ___fake___has_new, gpointer ___data ) = (func); ___messages_changed; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define mn_mailbox_connect__removed(object,func,data)	g_signal_connect(MN_MAILBOX(object),"removed",(GCallback)(func),(data))
#define mn_mailbox_connect_after__removed(object,func,data)	g_signal_connect_after(MN_MAILBOX(object),"removed",(GCallback)(func),(data))
#define mn_mailbox_connect_data__removed(object,func,data,destroy_data,flags)	g_signal_connect_data(MN_MAILBOX(object),"removed",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define mn_mailbox_connect__messages_changed(object,func,data)	g_signal_connect(MN_MAILBOX(object),"messages_changed",(GCallback)(func),(data))
#define mn_mailbox_connect_after__messages_changed(object,func,data)	g_signal_connect_after(MN_MAILBOX(object),"messages_changed",(GCallback)(func),(data))
#define mn_mailbox_connect_data__messages_changed(object,func,data,destroy_data,flags)	g_signal_connect_data(MN_MAILBOX(object),"messages_changed",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define MN_MAILBOX_PROP_URI(arg)    	"uri", __extension__ ({GObject *z = (arg); z;})
#define MN_MAILBOX_PROP_NAME(arg)    	"name", __extension__ ({gchar *z = (arg); z;})
#define MN_MAILBOX_GET_PROP_NAME(arg)	"name", __extension__ ({gchar **z = (arg); z;})
#define MN_MAILBOX_PROP_MUST_POLL(arg)    	"must_poll", __extension__ ({gboolean z = (arg); z;})
#define MN_MAILBOX_GET_PROP_MUST_POLL(arg)	"must_poll", __extension__ ({gboolean *z = (arg); z;})
#define MN_MAILBOX_PROP_MESSAGES(arg)    	"messages", __extension__ ({gpointer z = (arg); z;})
#define MN_MAILBOX_GET_PROP_MESSAGES(arg)	"messages", __extension__ ({gpointer *z = (arg); z;})
#define MN_MAILBOX_PROP_ERROR(arg)    	"error", __extension__ ({gchar *z = (arg); z;})
#define MN_MAILBOX_GET_PROP_ERROR(arg)	"error", __extension__ ({gchar **z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define MN_MAILBOX_PROP_URI(arg)    	"uri",(GObject *)(arg)
#define MN_MAILBOX_PROP_NAME(arg)    	"name",(gchar *)(arg)
#define MN_MAILBOX_GET_PROP_NAME(arg)	"name",(gchar **)(arg)
#define MN_MAILBOX_PROP_MUST_POLL(arg)    	"must_poll",(gboolean )(arg)
#define MN_MAILBOX_GET_PROP_MUST_POLL(arg)	"must_poll",(gboolean *)(arg)
#define MN_MAILBOX_PROP_MESSAGES(arg)    	"messages",(gpointer )(arg)
#define MN_MAILBOX_GET_PROP_MESSAGES(arg)	"messages",(gpointer *)(arg)
#define MN_MAILBOX_PROP_ERROR(arg)    	"error",(gchar *)(arg)
#define MN_MAILBOX_GET_PROP_ERROR(arg)	"error",(gchar **)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
