/* 
 * Copyright (c) 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include <gtk/gtk.h>
#include "mn-message.h"
%}
%{
#include "config.h"
#include <glib/gi18n.h>
#include "mn-util.h"
%}

class MN:Message:Label from Gtk:Label
{
  private unsigned int update_timeout_id;

  private MNMessage *message unrefwith g_object_unref;
  property OBJECT message (object_type = MN:Message,
			   flags = CONSTRUCT_ONLY,
			   link);

  override (G:Object) GObject *
    constructor (GType type, guint n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    Self *self;

    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = SELF(object);

    self_update(self);
    if (selfp->message->sent_time)
      selfp->update_timeout_id = g_timeout_add(500, self_update_cb, self);

    return object;
  }

  override (G:Object) void
    finalize (G:Object *object (check null type))
  {
    Self *self = SELF(object);

    if (selfp->update_timeout_id)
      g_source_remove(selfp->update_timeout_id);

    PARENT_HANDLER(object);
  }

  private void
    update (self)
  {
    GString *string;
    const char *current_label;

    string = g_string_new(NULL);
    self_append_row(string, _("Mailbox"), selfp->message->mailbox_uri->human_readable, TRUE);

    if (selfp->message->error)
      self_append_row(string, _("Unreadable message"), selfp->message->error, FALSE);
    else
      {
	char *ago = NULL;

	if (selfp->message->sent_time)
	  {
	    time_t now;

	    now = mn_time();
	    if (now > 0)
	      {
		time_t diff;

		diff = now - selfp->message->sent_time;
		if (diff >= 0)
		  ago = self_format_delay(diff);
	      }
	  }
	    
	self_append_row(string, _("From"), selfp->message->from, TRUE);
	self_append_row(string, _("Subject"), selfp->message->subject, ago != NULL);

	if (ago)
	  {
	    self_append_row(string, _("Sent"), ago, FALSE);
	    g_free(ago);
	  }
      }

    current_label = gtk_label_get_label(GTK_LABEL(self));
    if (strcmp(current_label, string->str))
      gtk_label_set_markup(GTK_LABEL(self), string->str);
    g_string_free(string, TRUE);
  }
  
  private gboolean
    update_cb (gpointer data (check null))
  {
    Self *self = data;

    GDK_THREADS_ENTER();
    self_update(self);
    GDK_THREADS_LEAVE();

    return TRUE;		/* continue */
  }

  private void
    append_row (GString *string (check null),
		const char *label (check null),
		const char *value (check null),
		gboolean newline)
  {
    char *markup;

    markup = g_markup_printf_escaped("<span weight=\"bold\">%s:</span> ", label);
    g_string_append(string, markup);
    g_free(markup);
    
    markup = g_markup_escape_text(value, -1);
    g_string_append(string, markup);
    g_free(markup);

    if (newline)
      g_string_append_c(string, '\n');
  }
  
  private char *
    format_delay (time_t delay)
  {
    char *str;

    if (delay < 60)
      str = g_strdup_printf(ngettext("%i second ago", "%i seconds ago", delay), delay);
    else if (delay < 60 * 60)
      {
	int minutes = delay / 60;
	str = g_strdup_printf(ngettext("%i minute ago", "%i minutes ago", minutes), minutes);
      }
    else if (delay < 60 * 60 * 24)
      {
	int hours = delay / (60 * 60);
	str = g_strdup_printf(ngettext("%i hour ago", "%i hours ago", hours), hours);
      }
    else if (delay < 60 * 60 * 24 * 7)
      {
	int days = delay / (60 * 60 * 24);
	str = g_strdup_printf(ngettext("%i day ago", "%i days ago", days), days);
      }
    else
      {
	int weeks = delay / (60 * 60 * 24 * 7);
	str = g_strdup_printf(ngettext("%i week ago", "%i weeks ago", weeks), weeks);
      }

    return str;
  }

  public GtkWidget *
    new (MN:Message *message (check null type))
  {
    return GTK_WIDGET(GET_NEW_VARG(MN_MESSAGE_LABEL_PROP_MESSAGE(G_OBJECT(message)), NULL));
  }
}
