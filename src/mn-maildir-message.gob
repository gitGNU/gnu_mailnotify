/*
 * Mail Notification
 * Copyright (C) 2003-2008 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-vfs-message.h"
%}

%privateheader{
#include <gtk/gtk.h>
%}

%{
#include "config.h"
#include <glib/gi18n.h>
#include <eel/eel.h>
#include "mn-vfs-mailbox.h"
#include "mn-vfs.h"
#include "mn-util.h"
%}

class MN:Maildir:Message from MN:VFS:Message
{
  private GtkWidget *delete_dialog unref {
    if (VAR != NULL)
      gtk_dialog_response(GTK_DIALOG(VAR), GTK_RESPONSE_CANCEL);
  };

  private int
    flags_sort_cb (const void *a, const void *b)
  {
    char ca = *((char *) a);
    char cb = *((char *) b);

    /* sort flags using ASCII order, see http://cr.yp.to/proto/maildir.html */

    return ca - cb;
  }

  override (MN:Message) gboolean
    mark_as_read_impl (MNMessage *message, GError **err)
  {
    MNVFSMessage *vmessage = MN_VFS_MESSAGE(message);
    char *old_flags;
    char *old_filename;
    char *new_filename;
    GnomeVFSURI *dir_uri;
    GnomeVFSURI *new_uri;
    gboolean status;

    /* http://cr.yp.to/proto/maildir.html */

    old_filename = gnome_vfs_uri_extract_short_name(vmessage->vfs_uri);

    old_flags = strrchr(old_filename, ',');
    if (old_flags)
      {
	char *new_flags;
	int old_len;
	char *base_filename;

	/* append the S (seen) flag */

	old_flags++;
	g_assert(strchr(old_flags, 'S') == NULL);

	old_len = strlen(old_flags);
	new_flags = g_new(char, old_len + 2); /* + space for S and nul */
	memcpy(new_flags, old_flags, old_len);
	new_flags[old_len] = 'S';
	new_flags[old_len + 1] = 0;
	qsort(new_flags, old_len + 1, sizeof(char), self_flags_sort_cb);

	base_filename = g_strndup(old_filename, old_flags - old_filename - 1);
	new_filename = g_strdup_printf("%s,%s", base_filename, new_flags);
	g_free(base_filename);
	g_free(new_flags);
      }
    else
      new_filename = g_strconcat(old_filename, ":2,S", NULL);

    g_free(old_filename);

    dir_uri = gnome_vfs_uri_append_path(MN_VFS_MAILBOX(MN_MESSAGE(message)->mailbox)->vfs_uri, "cur");
    new_uri = gnome_vfs_uri_append_file_name(dir_uri, new_filename);
    gnome_vfs_uri_unref(dir_uri);
    g_free(new_filename);

    status = mn_vfs_result_to_g_error(gnome_vfs_move_uri(vmessage->vfs_uri, new_uri, TRUE), err);
    gnome_vfs_uri_unref(new_uri);

    return status;
  }

  /* returns NULL if not supported for the volume where the file resides */
  private GnomeVFSURI *
    get_trash_uri (self)
  {
    MNVFSMessage *vmessage = MN_VFS_MESSAGE(self);
    GnomeVFSURI *trash_uri;

    /*
     * Do what is advised in the gnome_vfs_find_directory()
     * documentation: first pass find_if_needed, then create_if_needed.
     */

    if (gnome_vfs_find_directory(vmessage->vfs_uri,
				 GNOME_VFS_DIRECTORY_KIND_TRASH,
				 &trash_uri,
				 FALSE,
				 TRUE,
				 0) == GNOME_VFS_OK)
      return trash_uri;

    if (gnome_vfs_find_directory(vmessage->vfs_uri,
				 GNOME_VFS_DIRECTORY_KIND_TRASH,
				 &trash_uri,
				 TRUE,
				 FALSE,
				 S_IRUSR | S_IWUSR | S_IXUSR) == GNOME_VFS_OK)
      return trash_uri;

    return NULL;
  }

  /* If the users selects Cancel, returns FALSE without setting @err. */
  private gboolean
    delete_with_prompt (self, GError **err, const char *format, ...)
  {
    MNVFSMessage *vmessage = MN_VFS_MESSAGE(self);
    GtkWidget *dialog;
    va_list args;
    char *prompt;
    gboolean status;

    g_assert(selfp->delete_dialog == NULL);

    va_start(args, format);
    prompt = g_strdup_vprintf(format, args);
    va_end(args);

    selfp->delete_dialog = dialog = mn_alert_dialog_new(NULL,
							GTK_MESSAGE_WARNING,
							0,
							_("Delete message?"),
							prompt);
    g_free(prompt);

    eel_add_weak_pointer(&dialog);
    eel_add_weak_pointer(&selfp->delete_dialog);

    gtk_dialog_add_button(GTK_DIALOG(dialog), GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL);
    gtk_dialog_add_button(GTK_DIALOG(dialog), GTK_STOCK_DELETE, GTK_RESPONSE_OK);

    status = mn_dialog_run_nonmodal(GTK_DIALOG(dialog)) == GTK_RESPONSE_OK;

    /*
     * At this point @self is no longer valid since it might have been
     * finalized while the recursive main loop ran in
     * mn_dialog_run_nonmodal().
     */

    /* can have been nullified by the weak pointer set above */
    if (dialog != NULL)
      gtk_widget_destroy(dialog);

    if (! status)
      return FALSE;

    return mn_vfs_result_to_g_error(gnome_vfs_unlink_from_uri(vmessage->vfs_uri), err);
  }

  override (MN:Message) gboolean
    delete_impl (MNMessage *message, GError **err)
  {
    Self *self = SELF(message);
    MNVFSMessage *vmessage = MN_VFS_MESSAGE(message);
    GnomeVFSURI *trash_uri;
    char *filename;
    GnomeVFSURI *dest_uri;
    GnomeVFSResult result;

    trash_uri = self_get_trash_uri(self);
    if (trash_uri == NULL)
      return self_delete_with_prompt(self, err, _("The message cannot be moved to the trash. Permanently delete it?"));

    filename = gnome_vfs_uri_extract_short_name(vmessage->vfs_uri);
    dest_uri = gnome_vfs_uri_append_file_name(trash_uri, filename);
    gnome_vfs_uri_unref(trash_uri);
    g_free(filename);

    /*
     * Use gnome_vfs_xfer_uri() rather than gnome_vfs_move_uri(), in
     * case the trash resides on a different file system than the
     * message.
     */
    result = gnome_vfs_xfer_uri(vmessage->vfs_uri,
				dest_uri,
				GNOME_VFS_XFER_REMOVESOURCE
				| GNOME_VFS_XFER_FOLLOW_LINKS,
				GNOME_VFS_XFER_ERROR_MODE_ABORT,
				GNOME_VFS_XFER_OVERWRITE_MODE_REPLACE,
				NULL,
				NULL);
    gnome_vfs_uri_unref(dest_uri);

    if (result != GNOME_VFS_OK)
      return self_delete_with_prompt(self, err, _("The message could not be moved to the trash (%s). Permanently delete it?"), gnome_vfs_result_to_string(result));

    return TRUE;
  }
}
