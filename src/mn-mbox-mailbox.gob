/* 
 * Copyright (c) 2003, 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include "mn-mailbox.h"
%}
%privateheader{
#include <libgnomevfs/gnome-vfs.h>
%}
%{
#include "config.h"
#include <string.h>
#include <glib/gi18n.h>
#include <gdk/gdk.h>
#include "mn-mailbox-private.h"
#include "mn-vfs.h"
#ifdef WITH_MIME
#include "mn-message-mime.h"
#include "mn-gmime-stream-vfs.h"
#endif /* WITH_MIME */
#include "mn-util.h"
%}

class MN:mbox:Mailbox from MN:Mailbox
{
  private time_t last_mtime;

  class_init (class)
  {
    MN_MAILBOX_CLASS(class)->format = "mbox";
  }

  override (G:Object) GObject *
    constructor (GType type, guint n_construct_properties, GObjectConstructParam *construct_params)
  {
    GObject *object;
    MNMailbox *self;

    object = PARENT_HANDLER(type, n_construct_properties, construct_params);
    self = MN_MAILBOX(object);
    
    GDK_THREADS_ENTER();

    mn_mailbox_monitor(self,
		       self->uri->text,
		       GNOME_VFS_MONITOR_FILE,
		       MN_MAILBOX_MONITOR_EVENT_CHANGED
		       | MN_MAILBOX_MONITOR_EVENT_DELETED
		       | MN_MAILBOX_MONITOR_EVENT_CREATED);

    gdk_flush();
    GDK_THREADS_LEAVE();

    return object;
  }

  override (MN:Mailbox) gboolean
    impl_is (MNMailbox *dummy, MN:URI *uri (check null type))
  {
    gboolean is = FALSE;
    
    if (uri->vfs)
      {
	GnomeVFSFileInfo *file_info;
	
	file_info = gnome_vfs_file_info_new();
	if (gnome_vfs_get_file_info_uri(uri->vfs, file_info, GNOME_VFS_FILE_INFO_FOLLOW_LINKS) == GNOME_VFS_OK
	    && file_info->valid_fields & GNOME_VFS_FILE_INFO_FIELDS_TYPE
	    && file_info->valid_fields & GNOME_VFS_FILE_INFO_FIELDS_SIZE
	    && file_info->type == GNOME_VFS_FILE_TYPE_REGULAR)
	  {
	    if (file_info->size == 0) /* can be an empty mbox */
	      is = TRUE;
	    else
	      {
		GnomeVFSHandle *handle;
		
		if (gnome_vfs_open_uri(&handle, uri->vfs, GNOME_VFS_OPEN_READ) == GNOME_VFS_OK)
		  {
		    char buf[5];
		    GnomeVFSFileSize bytes_read;
		
		    if (gnome_vfs_read(handle, buf, sizeof(buf), &bytes_read) == GNOME_VFS_OK
			&& bytes_read == sizeof(buf)
			&& ! strncmp(buf, "From ", sizeof(buf)))
		      is = TRUE;
		
		    gnome_vfs_close(handle);
		  }
	      }
	  }
	gnome_vfs_file_info_unref(file_info);
      }
    
    return is;
  }

  override (MN:Mailbox) void
    impl_check (MN:Mailbox *mailbox (check null type))
  {
    Self *self = SELF(mailbox);
    gboolean check = TRUE;
    
    if (mn_mailbox_get_must_poll(mailbox))
      {
	GnomeVFSFileInfo *file_info;

	/* we're polling, so check only if the mailbox has changed since our last check */

	file_info = gnome_vfs_file_info_new();
	if (gnome_vfs_get_file_info_uri(mailbox->uri->vfs, file_info, GNOME_VFS_FILE_INFO_FOLLOW_LINKS) == GNOME_VFS_OK)
	  {
	    if (file_info->mtime == selfp->last_mtime)
	      check = FALSE;
	    else
	      selfp->last_mtime = file_info->mtime;
	  }
	gnome_vfs_file_info_unref(file_info);
      }

    if (check)
      {
	GnomeVFSResult result;
	GnomeVFSHandle *handle;

	result = gnome_vfs_open_uri(&handle, mailbox->uri->vfs, GNOME_VFS_OPEN_READ);
	if (result == GNOME_VFS_OK)
	  {
#ifdef WITH_MIME
	    GMimeStream *stream;
	    GMimeParser *parser;
	    GSList *messages = NULL;

	    stream = mn_gmime_stream_vfs_new(handle, mailbox->uri->text);
	    parser = g_mime_parser_new_with_stream(stream);
	    g_object_unref(stream);

	    g_mime_parser_set_scan_from(parser, TRUE);
	    
	    while (! g_mime_parser_eos(parser))
	      {
		GMimeMessage *mime_message;

		mime_message = g_mime_parser_construct_message(parser);
		if (mime_message)
		  {
		    const char *status;
		    
		    status = g_mime_message_get_header(mime_message, "Status");
		    if (! (status && (strchr(status, 'O') || strchr(status, 'R'))))
		      messages = g_slist_append(messages, mn_message_new_from_mime_message(mailbox->uri, mime_message));

		    g_object_unref(mime_message);
		  }
	      }

	    g_object_unref(parser);
	    gnome_vfs_close(handle);
	    
	    GDK_THREADS_ENTER();

	    mn_mailbox_set_has_new(mailbox, messages != NULL);
	    mn_mailbox_set_messages(mailbox, messages);
	    
	    gdk_flush();
	    GDK_THREADS_LEAVE();

	    mn_g_object_slist_free(messages);

#else /* WITH_MIME */

	    MNVFSReadLineContext *context = NULL;
	    const char *line;
	    gboolean in_header = FALSE;
	    gboolean seen = TRUE;	/* empty mailboxes have no new mail */
	  
	    while ((result = mn_vfs_read_line(&context, handle, &line)) == GNOME_VFS_OK)
	      {
		if (! *line)
		  {
		    if (! seen)
		      break;
		    in_header = FALSE;
		  }
		else if (g_str_has_prefix(line, "From "))
		  {
		    in_header = TRUE;
		    seen = FALSE;
		  }
		else if (in_header
			 && g_str_has_prefix(line, "Status:")
			 && (strchr(line, 'O') || strchr(line, 'R')))
		  seen = TRUE;
	      }
	    
	    mn_vfs_read_line_context_free(context);
	    gnome_vfs_close(handle);

	    GDK_THREADS_ENTER();

	    if (result == GNOME_VFS_OK || result == GNOME_VFS_ERROR_EOF)
	      mn_mailbox_set_has_new(mailbox, ! seen);
	    else
	      mn_mailbox_set_error(mailbox, _("error while reading mailbox: %s"), gnome_vfs_result_to_string(result));

	    gdk_flush();
	    GDK_THREADS_LEAVE();
#endif /* WITH_MIME */
	  }
	else
	  {
	    GDK_THREADS_ENTER();
	    mn_mailbox_set_error(mailbox, _("unable to open mailbox: %s"), gnome_vfs_result_to_string(result));
	    gdk_flush();
	    GDK_THREADS_LEAVE();
	  }
      }

    GDK_THREADS_ENTER();
    mn_mailbox_end_check(mailbox);
    gdk_flush();
    GDK_THREADS_LEAVE();
  }
}
