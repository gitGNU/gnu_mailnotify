/*
 * Mail Notification
 * Copyright (C) 2003-2006 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

requires 2.0.14

%headertop{
#include "mn-vfs-mailbox-backend.h"
%}

%{
#include "config.h"
#include <string.h>
#include <stdlib.h>
#include <glib/gi18n.h>
#include <eel/eel.h>
#include "mn-mailbox-private.h"
#include "mn-reentrant-mailbox-private.h"
#include "mn-vfs-mailbox-backend-private.h"
#include "mn-vfs.h"
#include "mn-util.h"
#include "mn-message-mime.h"
%}

class MN:Maildir:Mailbox:Backend from MN:VFS:Mailbox:Backend
{
  class_init (class)
  {
    MN_VFS_MAILBOX_BACKEND_CLASS(class)->format = "Maildir";
  }

  override (MN:VFS:Mailbox:Backend) void
    monitor_cb (MNVFSMailboxBackend *backend,
		const char *info_uri,
		GnomeVFSMonitorEventType event_type)
  {
    if (event_type == GNOME_VFS_MONITOR_EVENT_CHANGED
	|| event_type == GNOME_VFS_MONITOR_EVENT_DELETED
	|| event_type == GNOME_VFS_MONITOR_EVENT_CREATED)
      {
	char *filename;

	filename = eel_uri_get_basename(info_uri);
	if (filename)
	  {
	    if (filename[0] != '.')
	      mn_reentrant_mailbox_queue_check(MN_REENTRANT_MAILBOX(backend->mailbox));

	    g_free(filename);
	  }
      }
  }

  override (MN:VFS:Mailbox:Backend) gboolean
    is (MNVFSMailboxBackend *dummy,
	MNVFSMailboxBackendClass *class,
	MNVFSMailbox *mailbox)
  {
    int i;
    static const char *constitutive_dirs[] = { "cur", "new", "tmp" };
    gboolean is = FALSE;

    for (i = 0; i < G_N_ELEMENTS(constitutive_dirs); i++)
      {
	GnomeVFSURI *dir_uri;

	dir_uri = gnome_vfs_uri_append_path(mailbox->vfs_uri, constitutive_dirs[i]);
	is = mn_vfs_test(dir_uri, G_FILE_TEST_IS_DIR);
	gnome_vfs_uri_unref(dir_uri);

	if (! is)
	  break;
      }

    return is;
  }

  private void
    monitor_directory (self, unsigned long check_id, const char *dir (check null))
  {
    MNVFSMailboxBackend *backend = MN_VFS_MAILBOX_BACKEND(self);
    GnomeVFSURI *uri;
    char *text_uri;

    uri = gnome_vfs_uri_append_path(backend->mailbox->vfs_uri, dir);
    text_uri = gnome_vfs_uri_to_string(uri, GNOME_VFS_URI_HIDE_NONE);
    gnome_vfs_uri_unref(uri);

    mn_vfs_mailbox_backend_monitor(backend, check_id, text_uri, GNOME_VFS_MONITOR_DIRECTORY);
    g_free(text_uri);
  }

  private gboolean
    scan_directory (self,
		    unsigned long check_id,
		    const char *dir (check null),
		    gboolean new,
		    GSList **messages (check null),
		    GError **err)
  {
    MNVFSMailboxBackend *backend = MN_VFS_MAILBOX_BACKEND(self);
    GnomeVFSURI *uri;
    GnomeVFSResult result;
    GnomeVFSResult close_result;
    GnomeVFSDirectoryHandle *handle;
    GnomeVFSFileInfo *file_info;
    gboolean aborted = FALSE;

    uri = gnome_vfs_uri_append_path(backend->mailbox->vfs_uri, dir);

    result = gnome_vfs_directory_open_from_uri(&handle, uri, GNOME_VFS_FILE_INFO_FOLLOW_LINKS);
    if (result != GNOME_VFS_OK)
      {
	g_set_error(err, 0, 0, _("unable to open folder \"%s\": %s"), dir, gnome_vfs_result_to_string(result));
	gnome_vfs_uri_unref(uri);
	return FALSE;
      }

    file_info = gnome_vfs_file_info_new();
    while ((result = gnome_vfs_directory_read_next(handle, file_info)) == GNOME_VFS_OK)
      if (file_info->name[0] != '.')
	{
	  MNMessageFlags flags = 0;

	  if (mn_reentrant_mailbox_check_aborted(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
	    {
	      aborted = TRUE;
	      break;
	    }

	  if (new)
	    flags |= MN_MESSAGE_NEW;
	  else
	    {
	      char *info;

	      /* http://cr.yp.to/proto/maildir.html */

	      info = strrchr(file_info->name, ':');
	      if (! info
		  || ! g_str_has_prefix(info + 1, "2,")
		  || strpbrk(info + 3, "ST"))
		continue; /* no info, or message seen/trashed: ignore it */
	    }

	  *messages = g_slist_prepend(*messages, mn_vfs_message_new(backend,
								    uri,
								    file_info->name,
								    flags,
								    FALSE));
	}
    gnome_vfs_uri_unref(uri);
    gnome_vfs_file_info_unref(file_info);
    close_result = gnome_vfs_directory_close(handle);

    if (! aborted)
      {
	if (result == GNOME_VFS_ERROR_EOF || result == GNOME_VFS_OK)
	  {
	    if (close_result == GNOME_VFS_OK)
	      return TRUE;
	    else
	      g_set_error(err, 0, 0, _("unable to close folder \"%s\": %s"), dir, gnome_vfs_result_to_string(close_result));
	  }
	else
	  g_set_error(err, 0, 0, _("error while reading folder \"%s\": %s"), dir, gnome_vfs_result_to_string(result));
      }

    return FALSE;
  }

  override (MN:VFS:Mailbox:Backend) void
    check (MNVFSMailboxBackend *backend, unsigned long check_id)
  {
    Self *self = SELF(backend);
    GSList *messages = NULL;
    GError *err = NULL;
    gboolean status;

    self_monitor_directory(self, check_id, "cur");
    self_monitor_directory(self, check_id, "new");

    status = self_scan_directory(self, check_id, "cur", FALSE, &messages, &err)
      && self_scan_directory(self, check_id, "new", TRUE, &messages, &err);

    GDK_THREADS_ENTER();

    if (! mn_reentrant_mailbox_check_aborted_unlocked(MN_REENTRANT_MAILBOX(backend->mailbox), check_id))
      {
	if (status)
	  mn_mailbox_set_messages(MN_MAILBOX(backend->mailbox), messages);
	else
	  mn_mailbox_set_error(MN_MAILBOX(backend->mailbox), "%s", err->message);
      }

    mn_g_object_slist_free(messages);

    gdk_flush();
    GDK_THREADS_LEAVE();

    if (err)
      g_error_free(err);
  }

  private int
    flags_sort_cb (const void *a, const void *b)
  {
    char ca = *((char *) a);
    char cb = *((char *) b);

    /* sort flags using ASCII order, see http://cr.yp.to/proto/maildir.html */

    return ca - cb;
  }

  override (MN:VFS:Mailbox:Backend) gboolean
    mark_as_read (MNVFSMailboxBackend *dummy,
		  MNVFSMessage *message,
		  GError **err)
  {
    char *old_flags;
    char *old_filename;
    char *new_filename;
    GnomeVFSURI *dir_uri;
    GnomeVFSURI *new_uri;
    GnomeVFSResult result;
    gboolean status;

    /* http://cr.yp.to/proto/maildir.html */

    old_filename = gnome_vfs_uri_extract_short_name(message->vfs_uri);

    old_flags = strrchr(old_filename, ',');
    if (old_flags)
      {
	char *new_flags;
	int old_len;
	char *base_filename;

	/* append the S (seen) flag */

	old_flags++;
	g_assert(strchr(old_flags, 'S') == NULL);

	old_len = strlen(old_flags);
	new_flags = g_new(char, old_len + 2); /* + space for S and nul */
	memcpy(new_flags, old_flags, old_len);
	new_flags[old_len] = 'S';
	new_flags[old_len + 1] = 0;
	qsort(new_flags, old_len + 1, sizeof(char), self_flags_sort_cb);

	base_filename = g_strndup(old_filename, old_flags - old_filename - 1);
	new_filename = g_strdup_printf("%s,%s", base_filename, new_flags);
	g_free(base_filename);
	g_free(new_flags);
      }
    else
      new_filename = g_strconcat(old_filename, ":2,S", NULL);

    g_free(old_filename);

    dir_uri = gnome_vfs_uri_append_path(MN_VFS_MAILBOX(MN_MESSAGE(message)->mailbox)->vfs_uri, "cur");
    new_uri = gnome_vfs_uri_append_file_name(dir_uri, new_filename);
    gnome_vfs_uri_unref(dir_uri);
    g_free(new_filename);

    result = gnome_vfs_move_uri(message->vfs_uri, new_uri, TRUE);
    status = result == GNOME_VFS_OK;
    if (! status)
      g_set_error(err, 0, 0, "%s", gnome_vfs_result_to_string(result));

    gnome_vfs_uri_unref(new_uri);

    return status;
  }
}
