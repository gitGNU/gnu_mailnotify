/* 
 * Copyright (c) 2004 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include "mn-mailboxes.h"
%}
%privateheader{
#include "mn-mail-icon.h"
%}
%{
#include "config.h"
#include <errno.h>
#include <gnome.h>
#include <eel/eel.h>
#include "mn-properties.h"
#include "mn-util.h"
#include "mn-conf.h"
#include "mn-mailboxes.h"
#include "mn-unsupported-mailbox.h"
#include "mn-about-dialog.h"
#include "mn-summary.h"
#include "mn-summary-popup.h"
#include "mn-summary-dialog.h"

  MNShell *mn_shell = NULL;
%}

class MN:Shell from G:Object
{
  public MNMailboxes *mailboxes = {mn_mailboxes_new()} unrefwith g_object_unref;
  private MNMailIcon *icon;
  private GtkWidget *about;
  private int n_new;

  init (self)
  {
    g_return_if_fail(mn_shell == NULL);
    mn_shell = self;
    eel_add_weak_pointer(&mn_shell);

    self_init_icon(self);

    eel_gconf_notification_add(MN_CONF_BLINK_ON_ERRORS, self_notify_blink_on_errors_cb, self);
    eel_gconf_notification_add(MN_CONF_COMMANDS_MAIL_READER_NAMESPACE, self_notify_mail_reader_cb, self);

    g_object_connect(self->mailboxes,
		     "signal::messages-changed", self_mailboxes_messages_changed_h, self,
		     "swapped-signal::notify::must-poll", self_update_sensitivity, self,
		     "swapped-signal::list-changed", self_update_tooltip, self,
		     "swapped-signal::list-changed", self_update_icon, self,
		     "swapped-signal::has-new-changed", self_update_tooltip, self,
		     "swapped-signal::has-new-changed", self_update_icon, self,
		     "swapped-signal::error-changed", self_update_tooltip, self,
		     "swapped-signal::error-changed", self_update_icon, self,
		     "swapped-signal::messages-changed", self_update_tooltip, self,
		     NULL);

    mn_summary_popup_init();
  }

  override (G:Object) void
    finalize (GObject *object)
  {
    gtk_main_quit();
    PARENT_HANDLER(object);
  }
  
  private void
    mailboxes_messages_changed_h (MN:Mailboxes *mailboxes (check null type),
				  gboolean has_new,
				  gpointer user_data (check null))
  {
    if (has_new)
      {
	gnome_triggers_do(_("You have new mail."), NULL, "mail-notification", "new-mail", NULL);
	if (eel_gconf_get_boolean(MN_CONF_COMMANDS_NEW_MAIL_ENABLED))
	  mn_execute_command(MN_CONF_COMMANDS_NEW_MAIL_COMMAND);
      }
  }
  
  private void
    init_icon (self)
  {
    selfp->icon = MN_MAIL_ICON(mn_mail_icon_new());

    g_object_connect(selfp->icon,
		     "signal::activate", self_icon_activate_h, self,
		     "signal::activate-mail-reader", self_icon_activate_mail_reader_h, self,
		     "signal::activate-summary", self_icon_activate_summary_h, self,
		     "signal::activate-update", self_icon_activate_update_h, self,
		     "signal::activate-properties", self_icon_activate_properties_h, self,
		     "signal::activate-help", self_icon_activate_help_h, self,
		     "signal::activate-about", self_icon_activate_about_h, self,
		     "signal::activate-remove", self_icon_activate_remove_h, self,
		     "signal::destroy", self_icon_destroy_h, self,
		     NULL);
		     
    self_update_sensitivity(self);
    self_update_icon(self);
  }

  private void
    notify_blink_on_errors_cb (GConfClient *client,
			       guint cnxn_id,
			       GConfEntry *entry,
			       gpointer user_data (check null))
  {
    Self *self = user_data;

    GDK_THREADS_ENTER();
    self_update_icon(self);
    GDK_THREADS_LEAVE();
  }
  
  private void
    notify_mail_reader_cb (GConfClient *client,
			   guint cnxn_id,
			   GConfEntry *entry,
			   gpointer user_data (check null))
  {
    Self *self = user_data;

    GDK_THREADS_ENTER();
    self_update_sensitivity(self);
    GDK_THREADS_LEAVE();
  }
  
  private void
    icon_activate_h (MN:Mail:Icon *icon (check null type),
		     gpointer user_data (check null))
  {
    MNAction action;

    action = mn_conf_get_enum_value(MN_TYPE_ACTION, MN_CONF_DOUBLE_CLICK_ACTION);

    switch (action)
      {
      case MN_ACTION_DISPLAY_MAIL_SUMMARY:
	mn_summary_dialog_display();
	break;

      case MN_ACTION_LAUNCH_MAIL_READER:
	if (eel_gconf_get_boolean(MN_CONF_COMMANDS_MAIL_READER_ENABLED))
	  mn_execute_command(MN_CONF_COMMANDS_MAIL_READER_COMMAND);
	break;

      default:
	g_return_if_reached();
      }
  }

  private void
    icon_activate_summary_h (MN:Mail:Icon *icon (check null type),
			     gpointer user_data (check null))
  {
    mn_summary_dialog_display();
  }
  
  private void
    icon_activate_mail_reader_h (MN:Mail:Icon *icon (check null type),
				 gpointer user_data (check null))
  {
    if (eel_gconf_get_boolean(MN_CONF_COMMANDS_MAIL_READER_ENABLED))
      mn_execute_command(MN_CONF_COMMANDS_MAIL_READER_COMMAND);
  }

  private void
    icon_activate_update_h (MN:Mail:Icon *icon (check null type),
			    gpointer user_data (check null))
  {
    Self *self = user_data;
    mn_mailboxes_check(self->mailboxes);
  }
  
  private void
    icon_activate_properties_h (MN:Mail:Icon *icon (check null type),
				gpointer user_data (check null))
  {
    mn_properties_display();
  }
  
  private void
    icon_activate_help_h (MN:Mail:Icon *icon (check null type),
			  gpointer user_data (check null))
  {
    mn_display_help(NULL, NULL);
  }
  
  private void
    icon_activate_about_h (MN:Mail:Icon *icon (check null type),
			   gpointer user_data (check null))
  {
    Self *self = user_data;
    self_display_about(self);
  }
  
  private void
    icon_activate_remove_h (MN:Mail:Icon *icon (check null type),
			    gpointer user_data (check null))
  {
    Self *self = user_data;
    g_object_unref(self);
  }

  private void
    icon_destroy_h (Gtk:Object *object (check null type),
		    gpointer user_data (check null))
  {
    Self *self = user_data;

    /* The Notification Area applet has been terminated. Recreate the icon. */
    self_init_icon(self);
  }

  private void
    update_sensitivity (self)
  {
    gboolean mail_reader_sensitive = FALSE;

    if (eel_gconf_get_boolean(MN_CONF_COMMANDS_MAIL_READER_ENABLED))
      {
	char *mail_reader;

	mail_reader = eel_gconf_get_string(MN_CONF_COMMANDS_MAIL_READER_COMMAND);
	if (mail_reader)
	  {
	    mail_reader_sensitive = TRUE;
	    g_free(mail_reader);
	  }
      }
    
    gtk_widget_set_sensitive(selfp->icon->mail_reader_item, mail_reader_sensitive);
    gtk_widget_set_sensitive(selfp->icon->update_item, mn_mailboxes_get_must_poll(self->mailboxes));
  }

  private void
    update_icon (self)
  {
    GSList *mailboxes;
    GSList *l;
    int n_new = 0;
    gboolean blink = FALSE;

    mailboxes = mn_mailboxes_get(self->mailboxes);
    MN_LIST_FOREACH(l, mailboxes)
      {
	MNMailbox *mailbox = l->data;

	if (mn_mailbox_get_has_new(mailbox))
	  n_new++;
	if (! blink && (mn_mailbox_get_error(mailbox) || MN_IS_UNSUPPORTED_MAILBOX(mailbox)))
	  blink = TRUE;
      }

    if (blink && ! eel_gconf_get_boolean(MN_CONF_BLINK_ON_ERRORS))
      blink = FALSE;
    
    if (selfp->n_new > 0 && n_new == 0 && eel_gconf_get_boolean(MN_CONF_COMMANDS_MAIL_READ_ENABLED))
      mn_execute_command(MN_CONF_COMMANDS_MAIL_READ_COMMAND);
    selfp->n_new = n_new;
    
    if (n_new > 0 || blink)
      {
	mn_blinking_image_set_blinking(MN_BLINKING_IMAGE(selfp->icon->image), blink);
	gtk_widget_show(GTK_WIDGET(selfp->icon));
      }
    else
      gtk_widget_hide(GTK_WIDGET(selfp->icon));
  }

  private void
    update_tooltip (self)
  {
    GtkWidget *vbox;
    GSList *mailboxes;
    GSList *messages;

    vbox = gtk_vbox_new(FALSE, 18);

    mailboxes = mn_mailboxes_get(self->mailboxes);
    if (mailboxes)
      {
	GSList *l;
	GString *new_string;
	GString *error_string;
	GString *unsupported_string;

	new_string = g_string_new(NULL);
	error_string = g_string_new(NULL);
	unsupported_string = g_string_new(NULL);

	MN_LIST_FOREACH(l, mailboxes)
          {
	    MNMailbox *mailbox = l->data;
	    const char *name;
	    const char *error;

	    name = mn_mailbox_get_name(mailbox);
	    error = mn_mailbox_get_error(mailbox);
	    
	    if (mn_mailbox_get_has_new(mailbox))
	      {
		int n_messages;

		if (*new_string->str)
		  g_string_append_c(new_string, '\n');
		g_string_append(new_string, name);
		
		n_messages = g_slist_length(mn_mailbox_get_messages(mailbox));
		if (n_messages > 0)
		  g_string_append_printf(new_string, " (%i)", n_messages);
	      }
	    
	    if (error)
	      {
		if (*error_string->str)
		  g_string_append_c(error_string, '\n');
		g_string_append_printf(error_string, "%s: %s", name, error);
	      }
	  
	    if (MN_IS_UNSUPPORTED_MAILBOX(mailbox))
	      {
		if (*unsupported_string->str)
		  g_string_append_c(unsupported_string, '\n');
		g_string_append_printf(unsupported_string, "%s: %s", name, mn_unsupported_mailbox_get_reason(MN_UNSUPPORTED_MAILBOX(mailbox)));
	      }
	  }

	if (*new_string->str)
	  self_tooltip_text_section_new(GTK_VBOX(vbox), _("Mailboxes Having New Mail"), new_string->str);
	if (*error_string->str)
	  self_tooltip_text_section_new(GTK_VBOX(vbox), _("Errors"), error_string->str);
	if (*unsupported_string->str)
	  self_tooltip_text_section_new(GTK_VBOX(vbox), _("Unsupported Mailboxes"), unsupported_string->str);

	g_string_free(new_string, TRUE);
	g_string_free(error_string, TRUE);
	g_string_free(unsupported_string, TRUE);
      }

    messages = mn_mailboxes_get_messages(mn_shell->mailboxes);
    if (messages)
      {
	GtkWidget *hbox;
	GtkWidget *messages_vbox;
	
	hbox = self_tooltip_section_new(GTK_VBOX(vbox), _("Mail Summary"));

	messages_vbox = gtk_vbox_new(FALSE, 0);
	gtk_widget_set_name(messages_vbox, "mn-tooltip-section-body");

	mn_summary_update(GTK_VBOX(messages_vbox), messages, FALSE);
	mn_g_object_slist_free(messages);

	gtk_box_pack_start(GTK_BOX(hbox), messages_vbox, TRUE, TRUE, 0);
      }

    gtk_widget_show_all(vbox);
    mn_mail_icon_set_tip_widget(selfp->icon, vbox);
  }
  
  private GtkWidget *
    tooltip_section_new (Gtk:VBox *vbox (check null type),
			 const char *title (check null))
  {
    GtkWidget *child_vbox;
    char *markup;
    GtkWidget *label;
    GtkWidget *hbox;

    child_vbox = gtk_vbox_new(FALSE, 6);

    markup = g_markup_printf_escaped("<span weight=\"bold\">%s</span>", title);
    label = gtk_label_new(markup);
    g_free(markup);

    gtk_widget_set_name(label, "mn-tooltip-section-title");
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
    gtk_label_set_use_markup(GTK_LABEL(label), TRUE);

    gtk_box_pack_start(GTK_BOX(child_vbox), label, FALSE, FALSE, 0);

    hbox = gtk_hbox_new(FALSE, 0);

    label = gtk_label_new("    ");
    gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);

    gtk_box_pack_start(GTK_BOX(child_vbox), hbox, TRUE, TRUE, 0);
    gtk_box_pack_start(GTK_BOX(vbox), child_vbox, TRUE, TRUE, 0);

    return hbox;
  }
  
  private void
    tooltip_text_section_new (Gtk:VBox *vbox (check null type),
			      const char *title (check null),
			      const char *text (check null))
  {
    GtkWidget *hbox;
    GtkWidget *label;

    hbox = self_tooltip_section_new(GTK_VBOX(vbox), title);

    label = gtk_label_new(text);
    gtk_widget_set_name(label, "mn-tooltip-section-body");
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);

    gtk_box_pack_start(GTK_BOX(hbox), label, TRUE, TRUE, 0);
  }
  
  public MNShell *
    new (void)
  {
    return GET_NEW;
  }

  public void
    display_about (self)
  {
    if (selfp->about)
      {
	gtk_window_present(GTK_WINDOW(selfp->about));
	return;
      }
    
    selfp->about = mn_about_dialog_new();
    eel_add_weak_pointer(&selfp->about);
    gtk_widget_show(GTK_WIDGET(selfp->about));
  }

  public void
    run_welcome (self)
  {
    GtkWidget *dialog;
    int response;

    mn_create_interface("welcome", "dialog", &dialog, NULL);
    gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_OK);

    response = gtk_dialog_run(GTK_DIALOG(dialog));
    gtk_widget_destroy(dialog);

    if (response == GTK_RESPONSE_OK)
      mn_properties_display();
  }
  
  public void
    report (self, char **report (check null))
  {
    GString *string;
    GSList *l;

    string = g_string_new(NULL);
    MN_LIST_FOREACH(l, mn_mailboxes_get(self->mailboxes))
      {
	MNMailbox *mailbox = l->data;
	const char *error;

	error = mn_mailbox_get_error(mailbox);

	g_string_append_printf(string, "%s\n", mailbox->uri->text);

	if (mn_mailbox_get_has_new(mailbox))
	  g_string_append(string, " has-new\n");
	if (error)
	  g_string_append_printf(string, " error %s\n", error);
	if (MN_IS_UNSUPPORTED_MAILBOX(mailbox))
	  g_string_append_printf(string, " unsupported %s\n", mn_unsupported_mailbox_get_reason(MN_UNSUPPORTED_MAILBOX(mailbox)));
      }

    *report = string->str;
    g_string_free(string, FALSE);
  }
}

%h{
  extern MNShell *mn_shell;
%}
