/* 
 * Copyright (C) 2004, 2005 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

requires 2.0.10

%headertop{
#include <gtk/gtk.h>
#include "mn-mailboxes.h"
#include "mn-mailbox-properties-dialog.h"
%}
%privateheader{
#include "mn-mail-icon.h"
%}
%{
#include "config.h"
#include <errno.h>
#include <gnome.h>
#include <eel/eel.h>
#include "mn-properties-dialog.h"
#include "mn-util.h"
#include "mn-conf.h"
#include "mn-mailboxes.h"
#include "mn-unsupported-mailbox.h"
#include "mn-about-dialog.h"
#include "mn-summary-popup.h"
#include "mn-main-window.h"
#include "mn-message-view.h"

  MNShell *mn_shell = NULL;
%}

class MN:Shell from G:Object
{
  public MNMailboxes *mailboxes = {mn_mailboxes_new()} unrefwith g_object_unref;
  private MNMailIcon *icon;
  private GtkWidget *about;
  private gboolean has_new;
  private GSList *mailbox_properties_dialogs;

  init (self)
  {
    g_return_if_fail(mn_shell == NULL);
    mn_shell = self;
    eel_add_weak_pointer(&mn_shell);

    self_init_icon(self);

    eel_gconf_notification_add(MN_CONF_BLINK_ON_ERRORS, self_notify_blink_on_errors_cb, self);
    eel_gconf_notification_add(MN_CONF_COMMANDS_MAIL_READER_NAMESPACE, self_notify_mail_reader_cb, self);
    eel_gconf_notification_add(MN_CONF_SUMMARY_TOOLTIP, self_notify_summary_tooltip_cb, self);

    g_object_connect(self->mailboxes,
		     "signal::messages-changed", self_messages_changed_h, self,
		     "signal::mailbox-removed", self_mailbox_removed_h, self,
		     "swapped-signal::notify::must-poll", self_update_sensitivity, self,
		     "swapped-signal::list-changed", self_update_tooltip, self,
		     "swapped-signal::list-changed", self_update_icon, self,
		     "swapped-signal::error-changed", self_update_tooltip, self,
		     "swapped-signal::error-changed", self_update_icon, self,
		     NULL);

    mn_summary_popup_init();
  }

  override (G:Object) void
    finalize (GObject *object)
  {
    gtk_main_quit();
    PARENT_HANDLER(object);
  }
  
  private void
    messages_changed_h (MN:Mailboxes *mailboxes (check null type),
			gboolean has_new,
			gpointer user_data (check null))
  {
    Self *self = user_data;

    if (has_new)
      {
	gnome_triggers_do(_("You have new mail."), NULL, "mail-notification", "new-mail", NULL);
	if (mn_conf_has_command(MN_CONF_COMMANDS_NEW_MAIL_NAMESPACE))
	  mn_execute_command(MN_CONF_COMMANDS_NEW_MAIL_COMMAND);
      }

    self_update_tooltip(self);
    self_update_icon(self);
  }

  private void
    mailbox_removed_h (MN:Mailboxes *mailboxes (check null type),
		       MN:Mailbox *mailbox (check null type),
		       gpointer user_data (check null))
  {
    Self *self = user_data;
    MNMailboxPropertiesDialog *dialog;

    /* destroy the associated properties dialog, if any */
    dialog = self_get_mailbox_properties_dialog(self, mailbox->uri);
    if (dialog)
      gtk_widget_destroy(GTK_WIDGET(dialog));
  }
  
  private void
    init_icon (self)
  {
    selfp->icon = MN_MAIL_ICON(mn_mail_icon_new());

    g_object_connect(selfp->icon,
		     "signal::activate", self_icon_activate_h, self,
		     "signal::activate-main-window", self_icon_activate_main_window_h, self,
		     "signal::activate-mail-reader", self_icon_activate_mail_reader_h, self,
		     "signal::activate-update", self_icon_activate_update_h, self,
		     "signal::activate-properties", self_icon_activate_properties_h, self,
		     "signal::activate-help", self_icon_activate_help_h, self,
		     "signal::activate-about", self_icon_activate_about_h, self,
		     "signal::activate-remove", self_icon_activate_remove_h, self,
		     "signal::destroy", self_icon_destroy_h, self,
		     NULL);
		     
    self_update_sensitivity(self);
    self_update_tooltip(self);
    self_update_icon(self);
  }

  private void
    notify_blink_on_errors_cb (GConfClient *client,
			       unsigned int cnxn_id,
			       GConfEntry *entry,
			       gpointer user_data (check null))
  {
    Self *self = user_data;

    GDK_THREADS_ENTER();
    self_update_icon(self);
    GDK_THREADS_LEAVE();
  }
  
  private void
    notify_mail_reader_cb (GConfClient *client,
			   unsigned int cnxn_id,
			   GConfEntry *entry,
			   gpointer user_data (check null))
  {
    Self *self = user_data;

    GDK_THREADS_ENTER();
    self_update_sensitivity(self);
    GDK_THREADS_LEAVE();
  }
  
  private void
    notify_summary_tooltip_cb (GConfClient *client,
			       unsigned int cnxn_id,
			       GConfEntry *entry,
			       gpointer user_data (check null))
  {
    Self *self = user_data;

    GDK_THREADS_ENTER();
    self_update_tooltip(self);
    GDK_THREADS_LEAVE();
  }
  
  private void
    icon_activate_h (MN:Mail:Icon *icon (check null type),
		     gpointer user_data (check null))
  {
    MNShell *self = user_data;
    MNAction action;

    action = mn_conf_get_enum_value(MN_TYPE_ACTION, MN_CONF_DOUBLE_CLICK_ACTION_2);

    switch (action)
      {
      case MN_ACTION_DISPLAY_MAIN_WINDOW:
	mn_main_window_display();
	break;

      case MN_ACTION_LAUNCH_MAIL_READER:
	if (mn_conf_has_command(MN_CONF_COMMANDS_MAIL_READER_NAMESPACE))
	  mn_execute_command(MN_CONF_COMMANDS_MAIL_READER_COMMAND);
	break;

      case MN_ACTION_UPDATE_MAIL_STATUS:
	mn_mailboxes_check(self->mailboxes);
	break;

      default:
	g_return_if_reached();
      }
  }

  private void
    icon_activate_main_window_h (MN:Mail:Icon *icon (check null type),
				 gpointer user_data (check null))
  {
    mn_main_window_display();
  }
  
  private void
    icon_activate_mail_reader_h (MN:Mail:Icon *icon (check null type),
				 gpointer user_data (check null))
  {
    mn_execute_command(MN_CONF_COMMANDS_MAIL_READER_COMMAND);
  }

  private void
    icon_activate_update_h (MN:Mail:Icon *icon (check null type),
			    gpointer user_data (check null))
  {
    Self *self = user_data;
    mn_mailboxes_check(self->mailboxes);
  }
  
  private void
    icon_activate_properties_h (MN:Mail:Icon *icon (check null type),
				gpointer user_data (check null))
  {
    mn_properties_dialog_display();
  }
  
  private void
    icon_activate_help_h (MN:Mail:Icon *icon (check null type),
			  gpointer user_data (check null))
  {
    mn_display_help(NULL, NULL);
  }
  
  private void
    icon_activate_about_h (MN:Mail:Icon *icon (check null type),
			   gpointer user_data (check null))
  {
    Self *self = user_data;
    self_display_about_dialog(self);
  }
  
  private void
    icon_activate_remove_h (MN:Mail:Icon *icon (check null type),
			    gpointer user_data (check null))
  {
    Self *self = user_data;
    g_object_unref(self);
  }

  private void
    icon_destroy_h (Gtk:Object *object (check null type),
		    gpointer user_data (check null))
  {
    Self *self = user_data;

    /* The Notification Area applet has been terminated. Recreate the icon. */
    self_init_icon(self);
  }

  private void
    update_sensitivity (self)
  {
    gtk_widget_set_sensitive(selfp->icon->mail_reader_item, mn_conf_has_command(MN_CONF_COMMANDS_MAIL_READER_NAMESPACE));
    gtk_widget_set_sensitive(selfp->icon->update_item, mn_mailboxes_get_must_poll(self->mailboxes));
  }

  private void
    update_icon (self)
  {
    GSList *l;
    gboolean has_new = FALSE;
    gboolean blink = FALSE;

    MN_LIST_FOREACH(l, mn_mailboxes_get(self->mailboxes))
      {
	MNMailbox *mailbox = l->data;

	if (mn_mailbox_get_messages(mailbox))
	  has_new = TRUE;
	if (mn_mailbox_get_error(mailbox) || MN_IS_UNSUPPORTED_MAILBOX(mailbox))
	  blink = TRUE;
      }

    if (selfp->has_new && ! has_new && mn_conf_has_command(MN_CONF_COMMANDS_MAIL_READ_NAMESPACE))
      mn_execute_command(MN_CONF_COMMANDS_MAIL_READ_COMMAND);
    selfp->has_new = has_new;
    
    if (blink && ! eel_gconf_get_boolean(MN_CONF_BLINK_ON_ERRORS))
      blink = FALSE;

    if (has_new || blink)
      {
	mn_blinking_image_set_blinking(MN_BLINKING_IMAGE(selfp->icon->image), blink);
	gtk_widget_show(GTK_WIDGET(selfp->icon));
      }
    else
      gtk_widget_hide(GTK_WIDGET(selfp->icon));
  }

  private void
    update_tooltip (self)
  {
    GtkWidget *vbox;
    GSList *mailboxes;

    vbox = gtk_vbox_new(FALSE, 18);

    mailboxes = mn_mailboxes_get(self->mailboxes);
    if (mailboxes)
      {
	GSList *l;
	GSList *new_mailboxes = NULL;
	GSList *error_mailboxes = NULL;
	GSList *unsupported_mailboxes = NULL;

	MN_LIST_FOREACH(l, mailboxes)
          {
	    MNMailbox *mailbox = l->data;
	    
	    if (mn_mailbox_get_messages(mailbox))
	      new_mailboxes = g_slist_append(new_mailboxes, mailbox);

	    if (mn_mailbox_get_error(mailbox))
	      error_mailboxes = g_slist_append(error_mailboxes, mailbox);

	    if (MN_IS_UNSUPPORTED_MAILBOX(mailbox))
	      unsupported_mailboxes = g_slist_append(unsupported_mailboxes, mailbox);
	  }

	if (new_mailboxes)
	  {
	    GString *string = g_string_new(NULL);

	    new_mailboxes = g_slist_sort(new_mailboxes, self_new_mailboxes_compare_func);
	    MN_LIST_FOREACH(l, new_mailboxes)
	      {
		MNMailbox *mailbox = l->data;
		int n_messages;

		if (*string->str)
		  g_string_append_c(string, '\n');
		g_string_append(string, mn_mailbox_get_name(mailbox));
		
		n_messages = g_slist_length(mn_mailbox_get_messages(mailbox));
		if (n_messages > 0)
		  g_string_append_printf(string, " (%i)", n_messages);
	      }
	    g_slist_free(new_mailboxes);
	    
	    self_tooltip_text_section_new(GTK_VBOX(vbox), _("Mailboxes Having New Mail"), string->str);
	    g_string_free(string, TRUE);
	  }

	if (error_mailboxes)
	  {
	    GString *string = g_string_new(NULL);

	    error_mailboxes = g_slist_sort(error_mailboxes, self_mailboxes_compare_by_name_func);
	    MN_LIST_FOREACH(l, error_mailboxes)
	      {
		MNMailbox *mailbox = l->data;

		if (*string->str)
		  g_string_append_c(string, '\n');
		g_string_append_printf(string, "%s: %s",
				       mn_mailbox_get_name(mailbox),
				       mn_mailbox_get_error(mailbox));
	      }
	    g_slist_free(error_mailboxes);

	    self_tooltip_text_section_new(GTK_VBOX(vbox), _("Errors"), string->str);
	    g_string_free(string, TRUE);
	  }
	
	if (unsupported_mailboxes)
	  {
	    GString *string = g_string_new(NULL);

	    unsupported_mailboxes = g_slist_sort(unsupported_mailboxes, self_mailboxes_compare_by_name_func);
	    MN_LIST_FOREACH(l, unsupported_mailboxes)
	      {
		MNMailbox *mailbox = l->data;

		if (*string->str)
		  g_string_append_c(string, '\n');
		g_string_append_printf(string, "%s: %s",
				       mn_mailbox_get_name(mailbox),
				       mn_unsupported_mailbox_get_reason(MN_UNSUPPORTED_MAILBOX(mailbox)));
	      }
	    g_slist_free(unsupported_mailboxes);
	    
	    self_tooltip_text_section_new(GTK_VBOX(vbox), _("Unsupported Mailboxes"), string->str);
	    g_string_free(string, TRUE);
	  }
      }

    if (eel_gconf_get_boolean(MN_CONF_SUMMARY_TOOLTIP))
      {
	GSList *messages;
	
	messages = mn_mailboxes_get_messages(mn_shell->mailboxes);
	if (messages)
	  {
	    GtkWidget *alignment;
	    GtkWidget *message_view;
	
	    alignment = self_tooltip_section_new(GTK_VBOX(vbox), _("Mail Summary"));
	    
	    message_view = mn_message_view_new(TRUE, FALSE);
	    gtk_widget_set_name(message_view, "mn-message-view");
	    
	    mn_message_view_set_messages(MN_MESSAGE_VIEW(message_view), messages);
	    mn_g_object_slist_free(messages);
	    
	    gtk_container_add(GTK_CONTAINER(alignment), message_view);
	  }
      }

    gtk_widget_show_all(vbox);
    mn_mail_icon_set_tip_widget(selfp->icon, vbox);
  }
  
  private int
    new_mailboxes_compare_func (gconstpointer a, gconstpointer b)
  {
    MNMailbox *mailbox_a = (MNMailbox *) a;
    MNMailbox *mailbox_b = (MNMailbox *) b;
    int cmp;

    /* sort by sent time (descending order) */
    cmp = self_get_latest_sent_time(mailbox_b) - self_get_latest_sent_time(mailbox_a);
    /* else sort by number of messages (descending order) */
    if (cmp == 0)
      cmp = g_slist_length(mn_mailbox_get_messages(mailbox_b)) - g_slist_length(mn_mailbox_get_messages(mailbox_a));
    /* else sort by name (ascending order) */
    if (cmp == 0)
      cmp = self_mailboxes_compare_by_name_func(a, b);

    return cmp;
  }

  private time_t
    get_latest_sent_time (MN:Mailbox *mailbox (check null type))
  {
    GSList *l;
    time_t latest = 0;

    MN_LIST_FOREACH(l, mn_mailbox_get_messages(mailbox))
      {
	MNMessage *message = l->data;

	if (message->sent_time > latest)
	  latest = message->sent_time;
      }

    return latest;
  }
  
  private int
    mailboxes_compare_by_name_func (gconstpointer a, gconstpointer b)
  {
    MNMailbox *mailbox_a = (MNMailbox *) a;
    MNMailbox *mailbox_b = (MNMailbox *) b;

    return mn_utf8_strcasecoll(mn_mailbox_get_name(mailbox_a),
			       mn_mailbox_get_name(mailbox_b));
  }
  
  private GtkWidget *
    tooltip_section_new (Gtk:VBox *vbox (check null type),
			 const char *title (check null))
  {
    GtkWidget *child_vbox;
    char *markup;
    GtkWidget *alignment;
    GtkWidget *label;

    child_vbox = gtk_vbox_new(FALSE, 6);

    markup = g_markup_printf_escaped("<span weight=\"bold\">%s</span>", title);
    label = gtk_label_new(markup);
    g_free(markup);

    gtk_widget_set_name(label, "mn-tooltip-section-title");
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
    gtk_label_set_use_markup(GTK_LABEL(label), TRUE);

    gtk_box_pack_start(GTK_BOX(child_vbox), label, FALSE, FALSE, 0);

    alignment = gtk_alignment_new(0.5, 0.5, 1.0, 1.0);
    gtk_alignment_set_padding(GTK_ALIGNMENT(alignment), 0, 0, 12, 0);

    gtk_box_pack_start(GTK_BOX(child_vbox), alignment, TRUE, TRUE, 0);
    gtk_box_pack_start(GTK_BOX(vbox), child_vbox, TRUE, TRUE, 0);

    return alignment;
  }
  
  private void
    tooltip_text_section_new (Gtk:VBox *vbox (check null type),
			      const char *title (check null),
			      const char *text (check null))
  {
    GtkWidget *alignment;
    GtkWidget *label;

    alignment = self_tooltip_section_new(GTK_VBOX(vbox), title);

    label = gtk_label_new(text);
    gtk_widget_set_name(label, "mn-tooltip-section-body");
    gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);

    gtk_container_add(GTK_CONTAINER(alignment), label);
  }
  
  public MNShell *
    new (void)
  {
    return GET_NEW;
  }

  public void
    display_about_dialog (self)
  {
    if (selfp->about)
      {
	gtk_window_present(GTK_WINDOW(selfp->about));
	return;
      }
    
    selfp->about = mn_about_dialog_new();
    eel_add_weak_pointer(&selfp->about);
    
    mn_main_window_add_transient(GTK_WINDOW(selfp->about));
    gtk_widget_show(GTK_WIDGET(selfp->about));
  }

  public void
    display_welcome_dialog (self)
  {
    GtkWidget *dialog;

    mn_create_interface(MN_INTERFACE_FILE("welcome.glade"), "dialog", &dialog, NULL);
    gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_OK);

    g_signal_connect(dialog, "response", G_CALLBACK(self_welcome_response_h), NULL);
    gtk_widget_show(dialog);
  }
  
  private void
    welcome_response_h (Gtk:Dialog *dialog (check null type),
			int response,
			gpointer user_data)
  {
    gtk_widget_destroy(GTK_WIDGET(dialog));
    if (response == GTK_RESPONSE_OK)
      mn_properties_dialog_display();
  }
  
  public void
    report (self, char **report (check null))
  {
    GString *string;
    GSList *l;

    string = g_string_new(NULL);
    MN_LIST_FOREACH(l, mn_mailboxes_get(self->mailboxes))
      {
	MNMailbox *mailbox = l->data;
	const char *error;

	error = mn_mailbox_get_error(mailbox);

	g_string_append_printf(string, "%s\n", mailbox->uri->text);

	if (mn_mailbox_get_messages(mailbox))
	  g_string_append(string, " has-new\n");
	if (error)
	  g_string_append_printf(string, " error %s\n", error);
	if (MN_IS_UNSUPPORTED_MAILBOX(mailbox))
	  g_string_append_printf(string, " unsupported %s\n", mn_unsupported_mailbox_get_reason(MN_UNSUPPORTED_MAILBOX(mailbox)));
      }

    *report = string->str;
    g_string_free(string, FALSE);
  }

  public void
    add_mailbox_properties_dialog (self, MN:Mailbox:Properties:Dialog *dialog (check null type))
  {
    g_return_if_fail(mn_mailbox_properties_dialog_get_uri(dialog) != NULL);

    selfp->mailbox_properties_dialogs = g_slist_append(selfp->mailbox_properties_dialogs, dialog);
    g_object_weak_ref(G_OBJECT(dialog), self_mailbox_properties_dialog_weak_notify_cb, self);
  }

  private void
    mailbox_properties_dialog_weak_notify_cb (gpointer data (check null),
					      GObject *former_object)
  {
    Self *self = data;

    selfp->mailbox_properties_dialogs = g_slist_remove(selfp->mailbox_properties_dialogs, former_object);
  }

  public MNMailboxPropertiesDialog *
    get_mailbox_properties_dialog (self, MN:URI *uri (check null type))
  {
    GSList *l;

    MN_LIST_FOREACH(l, selfp->mailbox_properties_dialogs)
      {
	MNMailboxPropertiesDialog *dialog = l->data;
	MNURI *this_uri;

	this_uri = mn_mailbox_properties_dialog_get_uri(dialog);
	if (! strcmp(this_uri->text, uri->text))
	  return dialog;
      }

    return NULL;
  }
}

%h{
  extern MNShell *mn_shell;
%}

/*
 * These enumerations really belong to mn-enums.gob, but gob does not
 * allow a class-less input file.
 */

enum MN_POSITION
{
  TOP_LEFT,
  TOP_RIGHT,
  BOTTOM_LEFT,
  BOTTOM_RIGHT
} MN:Position;

enum MN_ACTION
{
  DISPLAY_MAIN_WINDOW,
  LAUNCH_MAIL_READER,
  UPDATE_MAIL_STATUS
} MN:Action;

enum MN_TOOLBAR_STYLE
{
  ICONS			= GTK_TOOLBAR_ICONS,
  TEXT			= GTK_TOOLBAR_TEXT,
  BOTH			= GTK_TOOLBAR_BOTH,
  BOTH_HORIZ		= GTK_TOOLBAR_BOTH_HORIZ,
  DESKTOP_DEFAULT
} MN:Toolbar:Style;

enum MN_ASPECT_SOURCE
{
  THEME,
  CUSTOM
} MN:Aspect:Source;
